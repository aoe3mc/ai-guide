{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the AOE3 AI Scripting Guide!","text":""},{"location":"#what-is-this-guide-about","title":"What is this guide about?","text":"<p>This guide extends the AOE3 Mods Guide by elaborating on AI scripting, which the Mods Guide does not cover.</p>"},{"location":"#who-is-this-guide-for","title":"Who is this guide for?","text":"<p>This guide tries to be beginner-friendly, but it expects readers to have at least a basic computer knowledge like navigating to any folder and performing most common file operations: create, open, edit, save, copy, cut, paste, etc.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This guide is community-driven and not officially supported by Microsoft. It does not cover every aspect of AI scripting, but it tries to cover the most important ones. If you have any suggestions or wish to contribute, please head to the contribution guidelines.</p>"},{"location":"#about-the-authors","title":"About the Authors","text":"<p>This guide was written by the following people:</p> Author Discord GitHub AOE Forums AlistairJah alistairjah here here"},{"location":"getting-started/","title":"Getting Started","text":"<p>In this section, we will set up our environment to start making AI scripts.</p>"},{"location":"getting-started/#1-showing-file-extensions","title":"1. Showing file extensions","text":"<p>Before we start, we need to make sure that file extensions are shown in the file explorer.</p> Windows 11Windows 10 / 8.1 / 8Windows 7 <ol> <li>Press Win+E to open the file explorer.</li> <li>Click on View at the top.</li> <li>Click on Show.</li> <li>Make sure File name extensions is checked.</li> </ol> <ol> <li>Press Win+E to open the file explorer.</li> <li>Click on View at the top.</li> <li>Make sure File name extensions is checked.</li> </ol> <ol> <li>In the Start menu, type folder options.</li> <li>Click on Folder Options.</li> <li>Click on the View tab.</li> <li>Make sure Hide extensions for known file types is unchecked.</li> </ol>"},{"location":"getting-started/#2-enabling-the-ai-debugger","title":"2. Enabling the AI Debugger","text":"<p>The AI Debugger will provide us with useful information about what's going on in the AI script and in the AI's mind: what it sees, what it is currently doing, etc.</p> <ol> <li>Navigate to User Folder &gt; Startup</li> <li>Create a text file named user.cfg</li> <li>Open it with your favorite text editor, paste the following lines    and save:</li> </ol> user.cfg<pre><code>developer\naiDebug\nshowAIEchoes\n</code></pre>"},{"location":"getting-started/#3-setting-up-a-local-mod","title":"3. Setting up a local mod","text":"<p>We will be using a local mod to store our AI scripts.</p> <ol> <li>Navigate to the Local Mods Folder.</li> <li>Create a new folder with any name you want. This will be the name of the    mod. In this guide, we will name it Mods Guide AI.</li> <li>Inside the Mods Guide AI folder, create a folder named Game.</li> <li>Inside the Game folder, create a folder named AI.</li> </ol> <p>When you're done, run the game. You should see the mod in Tools &gt; Mods. While you follow this guide, it is highly recommended to disable all other mods so that your environment is as similar as possible to this guide.</p>"},{"location":"getting-started/#4-creating-and-loading-a-script","title":"4. Creating and loading a script","text":""},{"location":"getting-started/#41-for-a-custom-scenario","title":"4.1. For a custom scenario","text":"<p>Normally, AI scripts are published either as part of a mod or as a mod on their own. Unfortunately, it appears that it is not possible to load a mod's AI script in a scenario if the script does not override one of the default scripts (or included in a script that overrides one of the default scripts, but in all cases, one of the default scripts must be overridden).</p> <p>Luckily, there is one default script that appears to be unused: Age3AI.xs. In this guide, we will override this script so that our experimentations don't interfere with the campaign or skirmish games.</p>"},{"location":"getting-started/#411-creating-a-script","title":"4.1.1. Creating a script","text":"<ol> <li>Navigate to Mods Guide AI &gt; Game &gt; AI.</li> <li>Create a new text file named Age3AI.xs.</li> <li>Open it with your favorite text editor, paste the following lines    and save:</li> </ol> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"The script is working!\");\n}\n</code></pre>"},{"location":"getting-started/#412-loading-the-script","title":"4.1.2. Loading the script","text":"<ol> <li> <p>Go to the scenario editor. For the purpose of this guide, we will generate a    new scenario based on New England.</p> </li> <li> <p>At the top left, click on File &gt; New.</p> </li> <li>In the Type dropdown, select new england.</li> <li>Leave the rest of the settings as they are.</li> <li> <p>Click on Generate.</p> </li> <li> <p>At the top, click on Scenario &gt; Player Data.</p> </li> <li>Under the Control column for the player you want to assign the script    to, select Computer. In this guide, we will assign the script to    all players.</li> <li>Click on the AI button.</li> <li>Find and select AGE3AI.XS in the list.</li> <li>Click on OPEN at the bottom left.</li> <li>In case the game says \"Any unsaved progress will be lost. Continue?\",    click on YES.</li> <li>Repeat steps 3 to 7 for all players.</li> <li>Close the Player Data window.</li> <li>Save the scenario as AI Mods Guide Scenario.</li> </ol>"},{"location":"getting-started/#42-for-a-skirmish-game","title":"4.2. For a skirmish game","text":"<p>This will override the default AI script for all civilizations.</p> <p>It is possible to change a specific civilization's AI script by overriding the corresponding .personality file. For example, to change the British AI script, you would override elizabeth.personality. However, this won't be covered in this guide (yet).</p>"},{"location":"getting-started/#421-creating-a-script","title":"4.2.1. Creating a script","text":"<ol> <li>Navigate to Mods Guide AI &gt; Game &gt; AI.</li> <li>Create a new text file named aiLoaderStandard.xs.</li> <li>Open it with your favorite text editor, paste the following lines    and save:</li> </ol> aiLoaderStandard.xs<pre><code>void main(void)\n{\n    aiChat(1, \"The script is working!\");\n}\n</code></pre>"},{"location":"getting-started/#422-loading-the-script","title":"4.2.2. Loading the script","text":"<p>There's no need to load the script since it overrides the default aiLoaderStandard.xs.</p>"},{"location":"getting-started/#5-testing-the-script","title":"5. Testing the script","text":""},{"location":"getting-started/#51-for-a-custom-scenario","title":"5.1. For a custom scenario","text":"<ol> <li>In the main menu, click on LOAD.</li> <li>In the dialog that appears, select CUSTOM SCENARIO.</li> <li>Select AI MODS GUIDE SCENARIO.AGE3YSCN.</li> <li>Click on OPEN.</li> <li>Once in-game, press Alt+Q to open the AI Debugger.</li> <li>If everything went well, you should see something like thos:</li> </ol> AI Debug Output<pre><code>00:00:00 (0): P#1 (Player 1) The script is working!\n</code></pre>"},{"location":"getting-started/#52-for-a-skirmish-game","title":"5.2. For a skirmish game","text":"<p>Just play a skirmish game as you normally would. If everything went well, AI personalities should be chatting \"The script is working!\" at the start of the game.</p>"},{"location":"getting-started/#6-conclusion","title":"6. Conclusion","text":"<p>Congratulations! You have successfully created and loaded a custom AI script. You can now start making your own AI scripts.</p>"},{"location":"ai/","title":"AI Scripting","text":"<p>Note for rookies</p> <p>If you are unfamiliar with XS, especially if you have never programmed before, you should start from The XS Language section first.</p> <p>Age of Empires III contains an internal AI that we can consider as a player. Just like a player, the internal AI is able to select units, move them, make them chop trees, etc. In short, it can do everything a player can do.</p> <p>However, the internal AI cannot play the game on its own. In order for it to do anything, it needs to be given orders. These orders are written in an AI script.</p> <p>This section of the guide elaborates on the features available for use in an AI script.</p>"},{"location":"ai/protounits/","title":"Proto Units","text":"<p>This section is a work in progress</p> <p>TODO:</p> <ul> <li>Add an example for each function.</li> <li>Add more details if relevant (e.g. constants for movement types).</li> </ul> <p>Proto units are the \"items\" that can be seen in the command panel or the scenario editor's object catalog.</p> Proto units (command panel) <p></p> Proto units (scenario editor) <p></p>"},{"location":"ai/protounits/#getting-the-proto-unit-id","title":"Getting the Proto Unit ID","text":"<p>The proto unit ID is required in order to obtain any information about a proto unit. It's an integer number that is stored in a constant prefixed with <code>cUnitType</code> (e.g. <code>cUnitTypeMusketeer</code>).</p> <p>To find the proto unit ID of a proto unit, proceed as follows:</p> <ul> <li>place the unit in the scenario editor.</li> <li>select the unit.</li> <li>press Alt+Q to open the debugger.</li> <li>at the top right, click on Misc.</li> <li>click on Display Selected KBUnit (Dynamic).</li> <li>a small blue window will appear with the proto unit name. Prefix this name   with <code>cUnitType</code> to get the proto unit ID.</li> </ul> Proto unit name <p>In this example, the proto unit name is <code>Musketeer</code>, so the proto unit ID is <code>cUnitTypeMusketeer</code>.</p> <p></p>"},{"location":"ai/protounits/functions/kbCanPath2/","title":"kbCanPath2","text":""},{"location":"ai/protounits/functions/kbCanPath2/#1-description","title":"1. Description","text":"<p>Signature of <code>kbCanPath2</code></p> <pre><code>bool kbCanPath2(vector pointA, vector pointB, int protoUnitID, float range);\n</code></pre> <p>This function returns true if the given proto unit can path from pointA to pointB. The effect of the range parameter is unknown.</p>"},{"location":"ai/protounits/functions/kbCanPath2/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetBuildLimit/","title":"kbGetBuildLimit","text":""},{"location":"ai/protounits/functions/kbGetBuildLimit/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetBuildLimit</code></p> <pre><code>int kbGetBuildLimit(int playerID, int protoUnitID);\n</code></pre> <p>This function returns the build limit of the given proto unit for the given player. If the proto unit has no build limit, the function returns <code>-1</code>.</p>"},{"location":"ai/protounits/functions/kbGetBuildLimit/#2-example","title":"2. Example","text":"<p>Example using <code>kbGetBuildLimit</code></p> Age3AI.xs<pre><code>rule BuildHousesSpanish\nactive\nminInterval 5\n{\n    // Get the build limit for houses.\n    int buildLimit = kbGetBuildLimit(cMyID, cUnitTypeHouseMed);\n\n    // Get the current number of houses (including those in progress).\n    int currentCount = kbUnitCount(cMyID, cUnitTypeHouseMed, cUnitStateABQ);\n\n    // If we have reached the build limit for houses, stop building them.\n    if (currentCount &gt;= buildLimit)\n    {\n        return;\n    }\n\n    // Here the rest of the rule for building houses (irrelevant for this example)\n}\n</code></pre>"},{"location":"ai/protounits/functions/kbGetPopCapAddition/","title":"kbGetPopCapAddition","text":""},{"location":"ai/protounits/functions/kbGetPopCapAddition/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetPopCapAddition</code></p> <pre><code>int kbGetPopCapAddition(int playerID, int protoUnitID);\n</code></pre> <p>This function returns how much population space the given proto unit provides when it's on the map. If the proto unit doesn't provide any population space, the function returns <code>0</code>.</p>"},{"location":"ai/protounits/functions/kbGetPopCapAddition/#2-example","title":"2. Example","text":"<p>Example using <code>kbGetPopCapAddition</code></p> Age3AI.xs<pre><code>rule BuildHousesSpanish\nactive\nminInterval 5\n{\n    // Try to always have at least 10 population slots available.\n\n    // Get the current population capacity.\n    int currentPopCap = kbGetPopCap();\n\n    // Get the current population count.\n    int currentPopCount = kbGetPop();\n\n    // Get the population space provided by a house.\n    int popCapAddition = kbGetPopCapAddition(cMyID, cUnitTypeHouseMed);\n\n    // Calculate how many houses we need to build to have 10 population\n    // slots available.\n    int housesToBuild = (currentPopCount + popCapAddition - currentPopCap) / popCapAddition;\n\n    // Don't continue if we don't need to build any houses.\n    if (housesToBuild &lt;= 0)\n    {\n        return;\n    }\n\n    // Here the rest of the rule for building houses (irrelevant for this example)\n}\n</code></pre>"},{"location":"ai/protounits/functions/kbGetPopSlots/","title":"kbGetPopSlots","text":""},{"location":"ai/protounits/functions/kbGetPopSlots/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetPopSlots</code></p> <pre><code>int kbGetPopSlots(int playerID, int protoUnitID);\n</code></pre> <p>This function returns how much population space the given proto unit occupies when it's on the map. If the proto unit doesn't occupy any population space, the function returns <code>0</code>.</p>"},{"location":"ai/protounits/functions/kbGetPopSlots/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetPopulationSlotsByUnitTypeID/","title":"kbGetPopulationSlotsByUnitTypeID","text":""},{"location":"ai/protounits/functions/kbGetPopulationSlotsByUnitTypeID/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetPopulationSlotsByUnitTypeID</code></p> <pre><code>int kbGetPopulationSlotsByUnitTypeID(int playerID, int unitTypeID);\n</code></pre> <p>This function returns the number of pop slots currently occupied by all units of the given type for the given player.</p>"},{"location":"ai/protounits/functions/kbGetPopulationSlotsByUnitTypeID/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitAICost/","title":"kbGetProtoUnitAICost","text":""},{"location":"ai/protounits/functions/kbGetProtoUnitAICost/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetProtoUnitAICost</code></p> <pre><code>float kbGetProtoUnitAICost(int protoUnitID);\n</code></pre> <p>This function returns the AI cost of the proto unit.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitAICost/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitID/","title":"kbGetProtoUnitID","text":""},{"location":"ai/protounits/functions/kbGetProtoUnitID/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetProtoUnitID</code></p> <pre><code>int kbGetProtoUnitID(string protoUnitName);\n</code></pre> <p>This function returns the proto unit ID of the given proto unit name.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitID/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitName/","title":"kbGetProtoUnitName","text":""},{"location":"ai/protounits/functions/kbGetProtoUnitName/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetProtoUnitName</code></p> <pre><code>string kbGetProtoUnitName(int protoUnitID);\n</code></pre> <p>This function returns the name corresponding to the proto unit ID.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitName/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitPopCount/","title":"kbGetProtoUnitPopCount","text":""},{"location":"ai/protounits/functions/kbGetProtoUnitPopCount/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetProtoUnitPopCount</code></p> <pre><code>int kbGetProtoUnitPopCount(int protoUnitID);\n</code></pre> <p>This function returns the pop count of the proto unit.</p>"},{"location":"ai/protounits/functions/kbGetProtoUnitPopCount/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbGetUnitTypeName/","title":"kbGetUnitTypeName","text":""},{"location":"ai/protounits/functions/kbGetUnitTypeName/#1-description","title":"1. Description","text":"<p>Signature of <code>kbGetUnitTypeName</code></p> <pre><code>string kbGetUnitTypeName(int unitTypeID);\n</code></pre> <p>This function returns the name corresponding to the unit type ID.</p>"},{"location":"ai/protounits/functions/kbGetUnitTypeName/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitAvailable/","title":"kbProtoUnitAvailable","text":""},{"location":"ai/protounits/functions/kbProtoUnitAvailable/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitAvailable</code></p> <pre><code>bool kbProtoUnitAvailable(int protoUnitID);\n</code></pre> <p>This function returns true if the proto unit is currently available, i.e. if it can be trained or built.</p>"},{"location":"ai/protounits/functions/kbProtoUnitAvailable/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitCanTrain/","title":"kbProtoUnitCanTrain","text":""},{"location":"ai/protounits/functions/kbProtoUnitCanTrain/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitCanTrain</code></p> <pre><code>bool kbProtoUnitCanTrain(int sourceProtoUnitID, int targetProtoUnitID);\n</code></pre> <p>This function returns true if the source proto unit can train the target proto unit.</p>"},{"location":"ai/protounits/functions/kbProtoUnitCanTrain/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetAssociatedTech/","title":"kbProtoUnitGetAssociatedTech","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetAssociatedTech/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetAssociatedTech</code></p> <pre><code>int kbProtoUnitGetAssociatedTech(int protoUnitID);\n</code></pre> <p>This function is used with Wonder proto units to determine which ageup tech is associated with the proto unit.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetAssociatedTech/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetBounty/","title":"kbProtoUnitGetBounty","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetBounty/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetBounty</code></p> <pre><code>float kbProtoUnitGetBounty(int protoUnitID);\n</code></pre> <p>This function returns the amount of XP gained when killing this proto unit.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetBounty/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetBuildBounty/","title":"kbProtoUnitGetBuildBounty","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetBuildBounty/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetBuildBounty</code></p> <pre><code>float kbProtoUnitGetBuildBounty(int protoUnitID);\n</code></pre> <p>This function returns the amount of XP gained by building/training this proto unit.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetBuildBounty/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetBuildPoints/","title":"kbProtoUnitGetBuildPoints","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetBuildPoints/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetBuildPoints</code></p> <pre><code>float kbProtoUnitGetBuildPoints(int protoUnitID);\n</code></pre> <p>This function returns the amount of time it takes to build the proto unit. The return value is in seconds.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetBuildPoints/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetGatherRate/","title":"kbProtoUnitGetGatherRate","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetGatherRate/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetGatherRate</code></p> <pre><code>float kbProtoUnitGetGatherRate(int gathererProtoUnitID,\n                               int resourceProtoUnitID,\n                               int resourceTypeID);\n</code></pre> <p>This function returns the rate at which the given gatherer gathers the given resource from the given resource unit.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetGatherRate/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetLOS/","title":"kbProtoUnitGetLOS","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetLOS/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetLOS</code></p> <pre><code>float kbProtoUnitGetLOS(int protoUnitID);\n</code></pre> <p>This function returns the vision range of the proto unit. The returned value is in meters.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetLOS/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetPopCap/","title":"kbProtoUnitGetPopCap","text":""},{"location":"ai/protounits/functions/kbProtoUnitGetPopCap/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitGetPopCap</code></p> <pre><code>int kbProtoUnitGetPopCap(int protoUnitID);\n</code></pre> <p>This function returns the population capacity of the proto unit.</p>"},{"location":"ai/protounits/functions/kbProtoUnitGetPopCap/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbProtoUnitIsType/","title":"kbProtoUnitIsType","text":""},{"location":"ai/protounits/functions/kbProtoUnitIsType/#1-description","title":"1. Description","text":"<p>Signature of <code>kbProtoUnitIsType</code></p> <pre><code>bool kbProtoUnitIsType(int playerID, int protoUnitID, int unitTypeID);\n</code></pre> <p>This function returns true if the proto unit is of the given type.</p>"},{"location":"ai/protounits/functions/kbProtoUnitIsType/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbUnitCostPerResource/","title":"kbUnitCostPerResource","text":""},{"location":"ai/protounits/functions/kbUnitCostPerResource/#1-description","title":"1. Description","text":"<p>Signature of <code>kbUnitCostPerResource</code></p> <pre><code>float kbUnitCostPerResource(int protoUnitID, int resourceTypeID);\n</code></pre> <p>This function returns the cost of the protounit for the given resource type.</p>"},{"location":"ai/protounits/functions/kbUnitCostPerResource/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"ai/protounits/functions/kbUnitGetTrainPoints/","title":"kbUnitGetTrainPoints","text":""},{"location":"ai/protounits/functions/kbUnitGetTrainPoints/#1-description","title":"1. Description","text":"<p>Signature of <code>kbUnitGetTrainPoints</code></p> <pre><code>float kbUnitGetTrainPoints(int protoUnitID);\n</code></pre> <p>This function returns the amount of time it takes to train the proto unit. The return value is in seconds.</p>"},{"location":"ai/protounits/functions/kbUnitGetTrainPoints/#2-example","title":"2. Example","text":"<p>This section is a work in progress.</p>"},{"location":"reference/keywords/","title":"Keywords","text":"<p>The following keywords are reserved and cannot be used as a name for a variable, function, class, rule, rule group, or label.</p> <p><code>active</code> <code>bool</code> <code>break</code> <code>breakpoint</code> <code>case</code> <code>class</code> <code>const</code> <code>continue</code> <code>default</code> <code>else</code> <code>extern</code> <code>false</code> <code>float</code> <code>for</code> <code>group</code> <code>goto</code> <code>highFrequency</code> <code>if</code> <code>inactive</code> <code>include</code> <code>infiniteLoopLimit</code> <code>infiniteRecursionLimit</code> <code>int</code> <code>label</code> <code>maxInterval</code> <code>minInterval</code> <code>mutable</code> <code>priority</code> <code>return</code> <code>rule</code> <code>runImmediately</code> <code>static</code> <code>string</code> <code>switch</code> <code>true</code> <code>vector</code> <code>void</code> <code>while</code></p>"},{"location":"reference/constants/ages/","title":"Age Constants","text":"<p>The following constants are used to identify ages.</p> Age Constants<pre><code>extern const int cAge1 = 0;\nextern const int cAge2 = 1;\nextern const int cAge3 = 2;\nextern const int cAge4 = 3;\nextern const int cAge5 = 4;\n</code></pre>"},{"location":"reference/constants/area-group-types/","title":"Area Group Types","text":"Area Group Types<pre><code>extern const int cAreaGroupTypeLand = 0;\nextern const int cAreaGroupTypeWater = 1;\nextern const int cAreaGroupTypeImpassableLand = 2;\n</code></pre>"},{"location":"reference/constants/area-types/","title":"Area Types","text":"Area Types<pre><code>extern const int cAreaTypeForest = 1;\nextern const int cAreaTypeWater = 2;\nextern const int cAreaTypeImpassableLand = 3;\nextern const int cAreaTypeVPSite = 5;\n</code></pre>"},{"location":"reference/constants/attack-routes/","title":"Attack Routes","text":"Attack Routes<pre><code>extern const int cAttackRouteFrontRight = 0;\nextern const int cAttackRouteRightFront = 1;\nextern const int cAttackRouteRightBack = 2;\nextern const int cAttackRouteBackRight = 3;\nextern const int cAttackRouteBackLeft = 4;\nextern const int cAttackRouteLeftBack = 5;\nextern const int cAttackRouteLeftFront = 6;\nextern const int cAttackRouteFrontLeft = 7;\n</code></pre>"},{"location":"reference/constants/card-types/","title":"Card Type Constants","text":"<p>The following constants are used to identify card types.</p> Card Type Constants<pre><code>extern const int cHCCardTypeEcon = 0;\nextern const int cHCCardTypeMilitary = 1;\nextern const int cHCCardTypeWagon = 2;\nextern const int cHCCardTypeTeam = 3;\nextern const int cHCCardFlagWater = 1;\nextern const int cHCCardFlagUnit = 2;\nextern const int cHCCardFlagUnitUpgrade = 4;\nextern const int cHCCardFlagTeam = 8;\nextern const int cHCCardFlagMilitary = 16;\nextern const int cHCCardFlagVillager = 32;\nextern const int cHCCardFlagResourceCrate = 64;\nextern const int cHCCardFlagWagon = 128;\nextern const int cHCCardFlagMercenary = 256;\nextern const int cHCCardFlagTrickleGold = 512;\nextern const int cHCCardFlagTrickleWood = 1024;\nextern const int cHCCardFlagTrickleFood = 2048;\nextern const int cHCCardFlagTrickleXP = 4096;\nextern const int cHCCardFlagTrickleTrade = 8192;\nextern const int cHCCardFlagGatherRate = 16384;\nextern const int cHCCardFlagTrainPoints = 32768;\n</code></pre>"},{"location":"reference/constants/default-escrows/","title":"Default Escrows","text":"<p>The following constants are used to identify built-in escrows.</p> Default Escrows<pre><code>// Default resource inventory.\n// Resources are moved here for certain operations.\nextern const int cRootEscrowID = 0;\n\n// Resource inventory for economy plans.\nextern const int cEconomyEscrowID = 1;\n\n// Resource inventory for military plans.\nextern const int cMilitaryEscrowID = 2;\n\n// \"Emergency\" can be used to \"steal\" resources from\n// other escrows (in theory).\nextern const int cEmergencyEscrowID = -2;\n</code></pre>"},{"location":"reference/constants/difficulties/","title":"Difficulty Constants","text":"<p>The following constants are used to identify difficulties.</p> Difficulty Constants<pre><code>extern const int cDifficultySandbox = 0;\nextern const int cDifficultyEasy = 1;\nextern const int cDifficultyModerate = 2;\nextern const int cDifficultyHard = 3;\nextern const int cDifficultyExpert = 4;\nextern const int cDifficultyExtreme = 5;\n\n// Current difficulty. Can be any of the above.\nextern const int cDifficultyCurrent;\n</code></pre>"},{"location":"reference/constants/events/","title":"Events","text":"Events<pre><code>// When the AI's age changes.\nextern const int cXSAgeHandler = 0;\n\n// Untested.\nextern const int cXSPowerHandler = 1;\n\n// Untested.\nextern const int cXSRetreatHandler = 2;\n\n// When the opponent responds to the AI's resign request.\nextern const int cXSResignHandler = 3;\n\n// When a building is built.\nextern const int cXSBuildHandler = 4;\n\n// When a homecity shipment arrives (i.e. the card is activated).\nextern const int cXSHomeCityTransportArriveHandler = 5;\n\n// When a homecity shipment returns (i.e. the card could not be activated).\nextern const int cXSHomeCityTransportReturnHandler = 6;\n\n// When the homecity levels up.\nextern const int cXSHomeCityLevelUpHandler = 7;\n\n// When the treaty time is up.\nextern const int cXSTreatyBrokenHandler = 8;\n\n// When the AI gains a homecity shipment point.\nextern const int cXSShipResourceGranted = 9;\n\n// When a plan is generated (i.e. not created by aiPlanCreate)\nextern const int cXSAutoCreatePlanHandler = 10;\n\n// When someone claims a treasure.\nextern const int cXSNuggetHandler = 11;\n\n// When someone's age changes.\nextern const int cXSPlayerAgeHandler = 12;\n\n// When an opportunity appears and needs to be scored.\nextern const int cXSScoreOppHandler = 13;\n\n// When a mission starts (related to goals and opportunities).\nextern const int cXSMissionStartHandler = 14;\n\n// When a mission ends (related to goals and opportunities).\nextern const int cXSMissionEndHandler = 15;\n\n// When the game is over.\nextern const int cXSGameOverHandler = 16;\n\n// When the monopoly timer starts.\nextern const int cXSMonopolyStartHandler = 17;\n\n// When the monopoly timer is broken.\nextern const int cXSMonopolyEndHandler = 18;\n\n// Untested.\nextern const int cXSWonderVictoryStartHandler = 19;\n\n// Untested.\nextern const int cXSWonderVictoryEndHandler = 20;\n\n// Untested.\nextern const int cXSRelicVictoryStartHandler = 21;\n\n// Untested.\nextern const int cXSRelicVictoryEndHandler = 22;\n\n// When the King Of The Hill timer starts.\nextern const int cXSKOTHVictoryStartHandler = 23;\n\n// When the King Of The Hill timer is broken.\nextern const int cXSKOTHVictoryEndHandler = 24;\n\n// When a plan is generated (i.e. not created by aiPlanCreate).\nextern const int cXSAutoCreateBuildPlanHandler_DEPRECATED = 25;\n\n// Untested.\nextern const int cXSRevoltedHandler = 26;\n\n// Untested.\nextern const int cXSBuildingPlacementFailedHandler = 27;\n</code></pre>"},{"location":"reference/constants/filename/","title":"Filename Constants","text":"Filename Constants<pre><code>// Contains the name of the AI script that was loaded.\nextern const string cFilename;\n\n// Contains the name of the random map the AI is currently playing on.\n// If the AI is playing on a scenario, the value of this constant is \"None\".\nextern const string cRandomMapName;\n</code></pre>"},{"location":"reference/constants/game-modes/","title":"Game Modes","text":"<p>The following constants are used to identify game modes.</p> Game Mode Constants<pre><code>// Supremacy.\nextern const int cGameModeSupremacy = 0;\n\n// Deathmatch.\nextern const int cGameModeDeathmatch = 1;\n\n// Empire Wars.\nextern const int cGameModeEmpireWars = 2;\n\n// Tycoon.\nextern const int cGameModeEconomyMode = 3;\n\n// Two Town.\nextern const int cGameModeTwoTown = 4;\n\n// Conquest: unavailable.\nextern const int cGameModeConquest = 5;\n\n// Lightning: unavailable.\nextern const int cGameModeLightning = 6;\n\n// Current Game Mode. Can be any of the above.\nextern const int cGameModeCurrent;\n</code></pre>"},{"location":"reference/constants/game-types/","title":"Game Types","text":"<p>The following constants are used to identify game types.</p> Game Type Constants<pre><code>// Custom scenario.\nextern const int cGameTypeScenario = 0;\n\n// Saved game.\nextern const int cGameTypeSaved = 1;\n\n// Random map.\nextern const int cGameTypeRandom = 2;\n\n// Single player campaign.\nextern const int cGameTypeCampaign = 4;\n\n// Current Game Type. Can be any of the above.\nextern const int cGameTypeCurrent;\n</code></pre>"},{"location":"reference/constants/game/","title":"Game Constants","text":"<p>The following constants have different values depending on the configuration of the current game.</p> Game Constants<pre><code>// Contains the current number of players, including Mother Nature.\nextern const int cNumberPlayers;\n\n// Contains the current game type(1)\nextern const int cGameTypeCurrent;\n\n// Contains the current game mode(2)\nextern const int cGameModeCurrent;\n\n// Contains the current difficulty(3)\nextern const int cDifficultyCurrent;\n\n// Contains the name of the random map the AI is currently\n// playing on. If the AI is playing on a scenario, the value\n// of this constant is \"None\".\nextern const string cRandomMapName;\n</code></pre> <ol> <li>See Game Types for possible values.</li> <li>See Game Modes for possible values.</li> <li>See Difficulties for possible values.</li> </ol>"},{"location":"reference/constants/micromanagement/","title":"Micromanagement Constants","text":"Micromanagement Constants<pre><code>extern const int cMicroPrioritizeTargets = 1;\nextern const int cMicroBackHerding = 2;\nextern const int cMicroKiting = 4;\nextern const int cMicroTacticSwitching = 8;\nextern const int cMicroEnableAbilities = 16;\nextern const int cMicroDodging = 32;\nextern const int cMicroLevelNone = 0;\nextern const int cMicroLevelNormal = 3;\nextern const int cMicroLevelHigh = 63;\n</code></pre>"},{"location":"reference/constants/movement-types/","title":"Movement Types","text":"Movement Types<pre><code>extern const int cMovementTypeNone = 0;\nextern const int cMovementTypeLand = 1;\nextern const int cMovementTypeWater = 2;\nextern const int cMovementTypeAir = 4;\nextern const int cMovementTypeNonSolid = 8;\n</code></pre>"},{"location":"reference/constants/nugget-types/","title":"Nugget Type Constants","text":"<p>The following constants are used to identify nugget types.</p> Nugget Type Constants<pre><code>extern const int cNuggetTypeAdjustResource = 1;\nextern const int cNuggetTypeSpawnUnit = 2;\nextern const int cNuggetTypeGiveLOS = 3;\nextern const int cNuggetTypeAdjustSpeed = 4;\nextern const int cNuggetTypeAdjustHP = 5;\nextern const int cNuggetTypeConvertUnit = 6;\nextern const int cNuggetTypeGiveTech = 7;\n</code></pre>"},{"location":"reference/constants/player-relations/","title":"Player Relation Constants","text":"<p>The following constants are used to identify player relations.</p> Player Relation Constants<pre><code>// Any player.\nextern const int cPlayerRelationAny = 99999;\n\n// Context player.\nextern const int cPlayerRelationSelf = 100000;\n\n// Enemies, including Mother Nature.\nextern const int cPlayerRelationEnemy = 100002;\n\n// Allies, including self.\nextern const int cPlayerRelationAlly = 100001;\n\n// Enemies, excluding Mother Nature.\nextern const int cPlayerRelationEnemyNotGaia = 100004;\n\n// Allies, excluding self.\nextern const int cPlayerRelationAllyExcludingSelf = 100005;\n</code></pre>"},{"location":"reference/constants/player/","title":"Player Constants","text":"<p>The following constants have different values depending on the player the AI script was assigned to.</p> Player Constants<pre><code>// Contains the ID of the player the AI script was assigned to.\nextern const int cMyID;\n\n// Contains the culture ID of the civilization the AI is\n// currently playing as.\nextern const int cMyCulture;\n\n// Contains the civilization ID of the civilization the AI is\n// currently playing as.\nextern const int cMyCiv;\n\n// Contains the team ID of the team the AI is currently playing on.\nextern const int cMyTeam;\n</code></pre>"},{"location":"reference/constants/resign-types/","title":"Resign Types","text":"Resign Types<pre><code>extern const int cResignGatherers = 0;\nextern const int cResignTeammates = 2;\nextern const int cResignMilitaryPop = 3;\n</code></pre>"},{"location":"reference/constants/resource-types/","title":"Resource Types","text":"Resource Types<pre><code>extern const int cResourceGold = 0;\nextern const int cResourceWood = 1;\nextern const int cResourceFood = 2;\nextern const int cResourceFame = 3;\nextern const int cResourceSkillPoints = 4;\nextern const int cResourceXP = 5;\nextern const int cResourceShips = 6;\nextern const int cResourceTrade = 7;\nextern const int cResourceInfluence = 8;\nextern const int cAllResources = -1234;\n</code></pre>"},{"location":"reference/constants/starting-resources/","title":"Starting Resources","text":"Starting Resources Constants<pre><code>extern const int cGameStartingResourcesStandard = 0;\nextern const int cGameStartingResourcesMedium = 1;\nextern const int cGameStartingResourcesHigh = 2;\nextern const int cGameStartingResourcesUltra = 3;\nextern const int cGameStartingResourcesInfinite = 4;\nextern const int cGameStartingResourcesRandom = 5;\n</code></pre>"},{"location":"reference/constants/vector/","title":"Vector Constants","text":"Vector Constants<pre><code>extern const vector cInvalidVector = xsVectorSet(-1, -1, -1);\nextern const vector cOriginVector = xsVectorSet(0, 0, 0);\n</code></pre>"},{"location":"reference/constants/building-placement/events/","title":"Building Placement Events","text":"Building Placement Events<pre><code>extern const int cBuildingPlacementEventDone = 0;\nextern const int cBuildingPlacementEventFailed = 1;\n</code></pre>"},{"location":"reference/constants/building-placement/preferences/","title":"Building Placement Preferences","text":"Building Placement Preferences<pre><code>extern const int cBuildingPlacementPreferenceNone = -1;\nextern const int cBuildingPlacementPreferenceBack = 0;\nextern const int cBuildingPlacementPreferenceFront = 1;\nextern const int cBuildingPlacementPreferenceLeft = 2;\nextern const int cBuildingPlacementPreferenceRight = 3;\n</code></pre>"},{"location":"reference/constants/communication/chat-verbs/","title":"Chat Verbs","text":"Chat Verbs<pre><code>extern const int cPlayerChatVerbInvalid = 0;\nextern const int cPlayerChatVerbAttack = 1;\nextern const int cPlayerChatVerbDefend = 2;\nextern const int cPlayerChatVerbTribute = 3;\nextern const int cPlayerChatVerbFeed = 4;\nextern const int cPlayerChatVerbCancel = 5;\nextern const int cPlayerChatVerbClaim = 6;\nextern const int cPlayerChatVerbTrain = 7;\nextern const int cPlayerChatVerbStrategy = 8;\n</code></pre>"},{"location":"reference/constants/communication/response-types/","title":"Chat Response Types","text":"Chat Response Types<pre><code>extern const int cPlayerChatResponseTypeYes = 0;\nextern const int cPlayerChatResponseTypeNo = 1;\n</code></pre>"},{"location":"reference/constants/communication/target-strategies/","title":"Chat Target Strategies","text":"Chat Target Strategies<pre><code>extern const int cPlayerChatTargetStrategyInvalid = 0;\nextern const int cPlayerChatTargetStrategyRush = 1;\nextern const int cPlayerChatTargetStrategyBoom = 2;\nextern const int cPlayerChatTargetStrategyTurtle = 3;\n</code></pre>"},{"location":"reference/constants/communication/target-types/","title":"Chat Target Types","text":"Chat Target Types<pre><code>extern const int cPlayerChatTargetTypeInvalid = 0;\nextern const int cPlayerChatTargetTypePlayers = 1;\nextern const int cPlayerChatTargetTypeUnits = 2;\nextern const int cPlayerChatTargetTypeUnitTypes = 3;\nextern const int cPlayerChatTargetTypeResource = 4;\nextern const int cPlayerChatTargetTypeLocation = 5;\n</code></pre>"},{"location":"reference/constants/opportunities/opportunity-sources/","title":"Opportunity Sources","text":"Opportunity Sources<pre><code>extern const int cOpportunitySourceAutoGenerated = 0;\nextern const int cOpportunitySourceAllyRequest = 1;\nextern const int cOpportunitySourceTrigger = 2;\n</code></pre>"},{"location":"reference/constants/opportunities/opportunity-target-types/","title":"Opportunity Target Types","text":"Opportunity Target Types<pre><code>extern const int cOpportunityTargetTypeBase = 0;\nextern const int cOpportunityTargetTypeVPSite = 1;\nextern const int cOpportunityTargetTypeResource = 2;\nextern const int cOpportunityTargetTypePointRadius = 3;\nextern const int cOpportunityTargetTypeUnitList = 4;\n</code></pre>"},{"location":"reference/constants/opportunities/opportunity-types/","title":"Opportunity Types","text":"Opportunity Types<pre><code>extern const int cOpportunityTypeDestroy = 0;\nextern const int cOpportunityTypeClaim = 1;\nextern const int cOpportunityTypeRaid = 2;\nextern const int cOpportunityTypeDefend = 3;\nextern const int cOpportunityTypeRescueExplorer = 4;\n</code></pre>"},{"location":"reference/constants/plans/plan-events/","title":"Plan Events","text":"Plan Events<pre><code>extern const int cPlanEventDone = 0;\nextern const int cPlanEventFailed = 1;\nextern const int cPlanEventPoll = 2;\nextern const int cPlanEventIdle = 3;\nextern const int cPlanEventStateChange = 4;\n</code></pre>"},{"location":"reference/constants/plans/plan-states/","title":"Plan States","text":"Plan States<pre><code>extern const int cPlanStateNone = 0;\nextern const int cPlanStateDone = 1;\nextern const int cPlanStateFailed = 2;\nextern const int cPlanStateBuild = 3;\nextern const int cPlanStateGather = 4;\nextern const int cPlanStatePlace = 5;\nextern const int cPlanStateExplore = 6;\nextern const int cPlanStateTrain = 7;\nextern const int cPlanStateResearch = 8;\nextern const int cPlanStateAttack = 9;\nextern const int cPlanStateGoto = 10;\nextern const int cPlanStateEmpower = 11;\nextern const int cPlanStateEnter = 12;\nextern const int cPlanStateExit = 13;\nextern const int cPlanStateEvaluate = 14;\nextern const int cPlanStatePatrol = 15;\nextern const int cPlanStateRetreat = 16;\nextern const int cPlanStateWorking = 17;\nextern const int cPlanStateTransport = 18;\nextern const int cPlanStateDualPlace = 19;\nextern const int cPlanStateWait = 20;\nextern const int cPlanStateCast = 21;\nextern const int cPlanStateVillagerAttack = 22;\nextern const int cPlanStateClaimNugget = 23;\nextern const int cPlanStateGatherResources = 24;\nextern const int cPlanStateIdle = 25;\n</code></pre>"},{"location":"reference/constants/plans/plan-types/","title":"Plan Types","text":"Plan Types<pre><code>// Unknown.\nextern const int cPlanMove = 0;\n\n// Attack plan. Deprecated. Superseded by cPlanCombat.\nextern const int cPlanAttack = 1;\n\n// Build Plan. Used to build buildings.\nextern const int cPlanBuild = 2;\n\n// Train Plan. Used to train units.\nextern const int cPlanTrain = 3;\n\n// Research plan. Used to research techs.\nextern const int cPlanResearch = 4;\n\n// Unknown.\nextern const int cPlanWork = 5;\n\n// Gather plan. Used to gather resources.\nextern const int cPlanGather = 6;\n\n// Explore plan. Used for scouting.\nextern const int cPlanExplore = 7;\n\n// Data plan. Used for storing data to be deleted later.\nextern const int cPlanData = 8;\n\n// Progression plan. Used for generating other plans to\n// obtain a certain unit or tech.\nextern const int cPlanProgression = 9;\n\n// Unknown.\nextern const int cPlanFarm = 10;\n\n// Unknown.\nextern const int cPlanHunt = 11;\n\n// Unknown.\nextern const int cPlanHuntAggressive = 12;\n\n// Unknown.\nextern const int cPlanFish = 13;\n\n// Herd plan. Used for grouping units in a certain\n// position or a certain unit.\nextern const int cPlanHerd = 14;\n\n// Transport plan. Used for transporting units\n// inside another unit (mostly boats and ships).\nextern const int cPlanTransport = 15;\n\n// Unknown.\nextern const int cPlanAttackStrategy = 16;\n\n// In the debugger, indicates a past plan that was\n// making use of the selected unit.\nextern const int cPlanRemoved1 = 17;\n\n// Defend plan. Deprecated. Superseded by cPlanCombat.\nextern const int cPlanDefend = 18;\n\n// Reserve plan. Used to prevent plans from using the\n// reserved units.\nextern const int cPlanReserve = 19;\n\n// Goal plan. Used for generating opportunities, missions\n// and plans to achieve a certain goal (attacking, defending,\n// claiming a trading post...) Deprecated.\nextern const int cPlanGoal = 20;\n\n// Gather goal plan. Used for storing values to be used\n// for gather plans. Basically a fancy version of cPlanData.\nextern const int cPlanGatherGoal = 21;\n\n// Unknown.\nextern const int cPlanTrade = 22;\n\n// Nugget plan. Used for hunting treasures. When this plan\n// is used with a Hero unit, it triggers the used of its abilities.\nextern const int cPlanGatherNuggets = 23;\n\n// Mission plan. Generated by a goal plan. Deprecated.\nextern const int cPlanMission = 24;\n\n// Wall plan. Used for building walls.\nextern const int cPlanBuildWall = 25;\n\n// Town bell plan. Used for hiding villagers inside a town center.\nextern const int cPlanTownBell = 26;\n\n// Unknown.\nextern const int cPlanTower = 27;\n\n// Dance plan. Used for making units work on a unit.\n// This is supposed to be used with the Community\n// Plaza, but in reality, it works with any unit.\nextern const int cPlanNativeResearch = 28;\n\n// Repair plan. Used for repairing buildings.\nextern const int cPlanRepair = 29;\n\n// Combat plan. A new way to create attack/defense plan.\nextern const int cPlanCombat = 30;\n</code></pre>"},{"location":"reference/constants/plans/attack-plans/","title":"Attack Plan Variable Indexes","text":"Attack Plan Variable Indexes<pre><code>extern const int cAttackPlanPlayerID = 0;\nextern const int cAttackPlanSpecificTargetID = 1;\nextern const int cAttackPlanTargetTypeID = 2;\nextern const int cAttackPlanQueryID = 3;\nextern const int cAttackPlanAttackRouteID = 4;\nextern const int cAttackPlanAttackRoutePattern = 5;\nextern const int cAttackPlanGatherPoint = 6;\nextern const int cAttackPlanGatherDistance = 7;\nextern const int cAttackPlanTargetID = 8;\nextern const int cAttackPlanMoveAttack = 9;\nextern const int cAttackPlanNumberAttacks = 10;\nextern const int cAttackPlanRefreshFrequency = 11;\nextern const int cAttackPlanLastRefreshTime = 12;\nextern const int cAttackPlanHandleDamageTime = 13;\nextern const int cAttackPlanHandleDamageFrequency = 14;\nextern const int cAttackPlanBaseAttackMode = 15;\nextern const int cAttackPlanPathID = 16;\nextern const int cAttackPlanFromGoalID = 17;\nextern const int cAttackPlanRetreatMode = 18;\nextern const int cAttackPlanTargetAreaGroups = 19;\nextern const int cAttackPlanTeleportLocation = 20;\nextern const int cAttackPlanAutoUseGPs = 21;\nextern const int cAttackPlanPowerID = 22;\nextern const int cAttackPlanGatherStartTime = 23;\nextern const int cAttackPlanTargetResourceType = 24;\nextern const int cAttackPlanAttackPoint = 25;\nextern const int cAttackPlanAttackPointEngageRange = 26;\nextern const int cAttackPlanAttackExplicitBaseID = 27;\nextern const int cAttackPlanGatherWaitTime = 28;\nextern const int cAttackPlanRefreshAttackRoute = 29;\nextern const int cAttackPlanLastEncounterTime = 30;\nextern const int cAttackPlanLastEvaluateTime = 31;\nextern const int cAttackPlanLastEvaluateResult = 32;\nextern const int cAttackPlanAllowMoreUnitsDuringAttack = 33;\n</code></pre>"},{"location":"reference/constants/plans/attack-plans/attack-route-patterns/","title":"Attack Plans Attack Route Patterns","text":"Attack Plans Attack Route Patterns<pre><code>// Least Recently Used.\nextern const int cAttackPlanAttackRoutePatternLRU = 0;\n// Most Recently Used.\nextern const int cAttackPlanAttackRoutePatternMRU = 1;\nextern const int cAttackPlanAttackRoutePatternRandom = 2;\nextern const int cAttackPlanAttackRoutePatternBest = 3;\n</code></pre>"},{"location":"reference/constants/plans/attack-plans/base-attack-mode/","title":"Attack Plans Base Attack Modes","text":"Attack Plans Base Attack Modes<pre><code>extern const int cAttackPlanBaseAttackModeNone = 0;\nextern const int cAttackPlanBaseAttackModeWeakest = 1;\nextern const int cAttackPlanBaseAttackModeStrongest = 2;\nextern const int cAttackPlanBaseAttackModeLRU = 3;\nextern const int cAttackPlanBaseAttackModeMRU = 4;\nextern const int cAttackPlanBaseAttackModeRandom = 5;\nextern const int cAttackPlanBaseAttackModeClosest = 6;\nextern const int cAttackPlanBaseAttackModeFarthest = 7;\nextern const int cAttackPlanBaseAttackModeExplicit = 8;\n</code></pre>"},{"location":"reference/constants/plans/attack-plans/retreat-modes/","title":"Attack Plans Retreat Modes","text":"Attack Plans Retreat Modes<pre><code>extern const int cAttackPlanRetreatModeNone = 0;\nextern const int cAttackPlanRetreatModeOutnumbered = 1;\nextern const int cAttackPlanRetreatModeOpportunistic = 2;\n</code></pre>"},{"location":"reference/constants/plans/attack-strategy-plans/","title":"Attack Strategy Plan Variable Indexes","text":"Attack Strategy Plan Variable Indexes<pre><code>extern const int cAttackStrategyPlanPlayerID = 0;\nextern const int cAttackStrategyPlanNumberTotalAttacks = 1;\n</code></pre>"},{"location":"reference/constants/plans/build-plans/","title":"Build Plan Variable Indexes","text":"Build Plan Variable Indexes<pre><code>extern const int cBuildPlanBuildingPlacementID = 0;\nextern const int cBuildPlanBuildingTypeID = 1;\nextern const int cBuildPlanInfluenceUnitTypeID = 2;\nextern const int cBuildPlanInfluenceUnitDistance = 3;\nextern const int cBuildPlanInfluenceUnitValue = 4;\nextern const int cBuildPlanInfluenceUnitFalloff = 5;\nextern const int cBuildPlanAreaID = 6;\nextern const int cBuildPlanCenterPosition = 7;\nextern const int cBuildPlanCenterPositionDistance = 8;\nextern const int cBuildPlanVPSiteID = 9;\nextern const int cBuildPlanSocketID = 10;\nextern const int cBuildPlanBuildUnitID = 11;\nextern const int cBuildPlanFoundationID = 12;\nextern const int cBuildPlanInfluencePosition = 13;\nextern const int cBuildPlanInfluencePositionDistance = 14;\nextern const int cBuildPlanInfluencePositionValue = 15;\nextern const int cBuildPlanInfluencePositionFalloff = 16;\nextern const int cBuildPlanDockPlacementPoint = 17;\nextern const int cBuildPlanNumAreaBorderLayers = 18;\nextern const int cBuildPlanBuildingBufferSpace = 19;\nextern const int cBuildPlanFailOnUnaffordable = 20;\nextern const int cBuildPlanInfluenceKBResourceID = 21;\nextern const int cBuildPlanRandomBPValue = 22;\nextern const int cBuildPlanInfluenceAtBuilderPosition = 23;\nextern const int cBuildPlanInfluenceBuilderPositionValue = 24;\nextern const int cBuildPlanInfluenceBuilderPositionDistance = 25;\nextern const int cBuildPlanInfluenceBuilderPositionFalloff = 26;\nextern const int cBuildPlanRetries = 27;\nextern const int cBuildPlanMaxRetries = 28;\nextern const int cBuildPlanPendingCommands = 29;\nextern const int cBuildPlanFailureCause = 30;\nextern const int cBuildPlanFailureCauseFloat = 31;\nextern const int cBuildPlanMaxCanPaths = 32;\nextern const int cBuildPlanCanPathStartIndex = 33;\nextern const int cBuildPlanInfluenceVPSiteType = 34;\nextern const int cBuildPlanInfluenceVPSiteTypeValue = 35;\nextern const int cBuildPlanInfluenceVPSiteTypeDistance = 36;\nextern const int cBuildPlanInfluenceVPSiteTypeFalloff = 37;\nextern const int cBuildPlanLocationPreference = 38;\nextern const int cBuildPlanCenterPositionStep = 39;\nextern const int cBuildPlanDoneWhenFoundationPlaced = 40;\nextern const int cBuildPlanNoUnitTimer = 41;\nextern const int cBuildPlanNoUnitTimeout = 42;\n</code></pre>"},{"location":"reference/constants/plans/build-plans/bpi-falloff/","title":"Build Plan Influence Falloff","text":"Build Plan Influence Falloff<pre><code>extern const int cBPIFalloffLinear = 0;\nextern const int cBPIFalloffNone = 1;\nextern const int cBPIFalloffLinearInverse = 2;\n</code></pre>"},{"location":"reference/constants/plans/build-wall-plans/","title":"Build Wall Plan Variable Indexes","text":"Build Wall Plan Variable Indexes<pre><code>extern const int cBuildWallPlanWallType = 0;\nextern const int cBuildWallPlanWallStart = 1;\nextern const int cBuildWallPlanWallEnd = 2;\nextern const int cBuildWallPlanWallRingCenterPoint = 3;\nextern const int cBuildWallPlanWallRingRadius = 4;\nextern const int cBuildWallPlanNumberOfGates = 5;\nextern const int cBuildWallPlanAreaIDs = 6;\nextern const int cBuildWallPlanFoundationID = 7;\nextern const int cBuildWallPlanGateIndices = 8;\nextern const int cBuildWallPlanGateProtoIDs = 9;\nextern const int cBuildWallPlanEdgeOfMapBuffer = 10;\nextern const int cBuildWallPlanPieces = 11;\nextern const int cBuildWallPlanPiecePositions = 12;\nextern const int cBuildWallPlanPieceRotations = 13;\nextern const int cBuildWallPlanEnRoute = 14;\n</code></pre>"},{"location":"reference/constants/plans/build-wall-plans/wall-types/","title":"Build Wall Plan Wall Types","text":"Build Wall Plan Wall Types<pre><code>extern const int cBuildWallPlanWallTypeStraight = 0;\nextern const int cBuildWallPlanWallTypeRing = 1;\nextern const int cBuildWallPlanWallTypeArea = 2;\n</code></pre>"},{"location":"reference/constants/plans/combat-plans/","title":"Combat Plan Variable Indexes","text":"Combat Plan Variable Indexes<pre><code>extern const int cCombatPlanCombatType = 0;\nextern const int cCombatPlanAttackRouteID = 1;\nextern const int cCombatPlanAttackRoutePattern = 2;\nextern const int cCombatPlanAttackPathID = 3;\nextern const int cCombatPlanTargetMode = 4;\nextern const int cCombatPlanTargetPlayerID = 5;\nextern const int cCombatPlanTargetBaseID = 6;\nextern const int cCombatPlanTargetPoint = 7;\nextern const int cCombatPlanGatherPoint = 8;\nextern const int cCombatPlanGatherDistance = 9;\nextern const int cCombatPlanGatherStartTime = 10;\nextern const int cCombatPlanGatherWaitTime = 11;\nextern const int cCombatPlanGatherUnitMaxDistance = 12;\nextern const int cCombatPlanGatherWaitForAllUnits = 13;\nextern const int cCombatPlanRetreatMode = 14;\nextern const int cCombatPlanAllowMoreUnitsDuringAttack = 15;\nextern const int cCombatPlanDoneMode = 16;\nextern const int cCombatPlanNoTargetTimer = 17;\nextern const int cCombatPlanNoTargetTimeout = 18;\nextern const int cCombatPlanTargetEngageRange = 19;\nextern const int cCombatPlanRefreshFrequency = 20;\nextern const int cCombatPlanInCombat = 21;\n</code></pre>"},{"location":"reference/constants/plans/combat-plans/attack-route-patterns/","title":"Combat Plan Attack Route Patterns","text":"Combat Plan Attack Route Patterns<pre><code>extern const int cCombatPlanAttackRoutePatternLRU = 0;\nextern const int cCombatPlanAttackRoutePatternMRU = 1;\nextern const int cCombatPlanAttackRoutePatternRandom = 2;\nextern const int cCombatPlanAttackRoutePatternBest = 3;\n</code></pre>"},{"location":"reference/constants/plans/combat-plans/combat-types/","title":"Combat Plan Combat Types","text":"Combat Plan Combat Types<pre><code>extern const int cCombatPlanCombatTypeAttack = 0;\nextern const int cCombatPlanCombatTypeDefend = 1;\n</code></pre>"},{"location":"reference/constants/plans/combat-plans/done-modes/","title":"Combat Plan Done Modes","text":"Combat Plan Done Modes<pre><code>extern const int cCombatPlanDoneModeRetreat = 1;\nextern const int cCombatPlanDoneModeNoTarget = 2;\nextern const int cCombatPlanDoneModeNoUnits = 4;\nextern const int cCombatPlanDoneModeBaseGone = 8;\n</code></pre>"},{"location":"reference/constants/plans/combat-plans/retreat-modes/","title":"Combat Plan Retreat Modes","text":"Combat Plan Retreat Modes<pre><code>extern const int cCombatPlanRetreatModeNone = 0;\nextern const int cCombatPlanRetreatModeOutnumbered = 1;\nextern const int cCombatPlanRetreatModeOpportunistic = 2;\n</code></pre>"},{"location":"reference/constants/plans/combat-plans/target-modes/","title":"Combat Plan Target Modes","text":"Combat Plan Target Modes<pre><code>extern const int cCombatPlanTargetModeBase = 0;\nextern const int cCombatPlanTargetModePoint = 1;\n</code></pre>"},{"location":"reference/constants/plans/defend-plans/","title":"Defend Plan Variable Indexes","text":"Defend Plan Variable Indexes<pre><code>extern const int cDefendPlanDefendTargetID = 0;\nextern const int cDefendPlanDefendAreaID = 1;\nextern const int cDefendPlanDefendBaseID = 2;\nextern const int cDefendPlanDefendPoint = 3;\nextern const int cDefendPlanEngageRange = 4;\nextern const int cDefendPlanPatrol = 5;\nextern const int cDefendPlanPatrolWaypoint = 6;\nextern const int cDefendPlanCurrentWaypoint = 7;\nextern const int cDefendPlanTargetID = 8;\nextern const int cDefendPlanGatherDistance = 9;\nextern const int cDefendPlanRefreshFrequency = 10;\nextern const int cDefendPlanLastRefreshTime = 11;\nextern const int cDefendPlanAttackTypeID = 12;\nextern const int cDefendPlanGatherPercentage = 13;\nextern const int cDefendPlanNoTargetTimeout = 14;\nextern const int cDefendPlanNoTargetTimer = 15;\nextern const int cDefendPlanStopTakingUnits = 16;\nextern const int cDefendPlanStopTakingUnitTime = 17;\n</code></pre>"},{"location":"reference/constants/plans/explore-plans/","title":"Explore Plan Variable Indexes","text":"Explore Plan Variable Indexes<pre><code>extern const int cExplorePlanLOSMultiplier = 0;\nextern const int cExplorePlanDoLoops = 1;\nextern const int cExplorePlanDoneLoops = 2;\nextern const int cExplorePlanNumberOfLoops = 3;\nextern const int cExplorePlanPointsInLoop = 4;\nextern const int cExplorePlanAvoidingAttackedAreas = 5;\nextern const int cExplorePlanReExploreAreas = 6;\nextern const int cExplorePlanLOSProtoUnitID = 7;\nextern const int cExplorePlanBuildPosition = 8;\nextern const int cExplorePlanBuilderUnitType = 9;\nextern const int cExplorePlanCanBuildLOSProto = 10;\nextern const int cExplorePlanHandleDamageTime = 11;\nextern const int cExplorePlanHandleDamageFrequency = 12;\nextern const int cExplorePlanQuitWhenPointIsVisible = 13;\nextern const int cExplorePlanQuitWhenPointIsVisiblePt = 14;\nextern const int cExplorePlanCurrentNuggetID = 15;\nextern const int cExplorePlanNuggetsToGather = 16;\nextern const int cExplorePlanOkToGatherNuggets = 17;\n</code></pre>"},{"location":"reference/constants/plans/fish-plans/","title":"Fish Plan Variable Indexes","text":"Fish Plan Variable Indexes<pre><code>extern const int cFishPlanLandPoint = 0;\nextern const int cFishPlanWaterPoint = 1;\nextern const int cFishPlanLandGroupID = 2;\nextern const int cFishPlanWaterGroupID = 3;\nextern const int cFishPlanAutoTrainBoats = 4;\nextern const int cFishPlanNumberInTraining = 5;\nextern const int cFishPlanDockID = 6;\nextern const int cFishPlanMaximumDockDist = 7;\nextern const int cFishPlanPlaceRetries = 8;\nextern const int cFishPlanMaxPlaceRetries = 9;\nextern const int cFishPlanBuildDock = 10;\nextern const int cFishPlanResourceType = 11;\nextern const int cFishPlanResourceSubType = 12;\nextern const int cFishPlanKBResourceID = 13;\nextern const int cFishPlanBreakDownID = 14;\nextern const int cFishPlanRetreatDockID = 15;\nextern const int cFishPlanQuitWhenResourceIsInvalid = 16;\nextern const int cFishPlanRetreatTime = 17;\n</code></pre>"},{"location":"reference/constants/plans/gather-goal-plans/","title":"Gather Goal Plan Variable Indexes","text":"Gather Goal Plan Variable Indexes<pre><code>extern const int cGatherGoalPlanScriptRPGPct = 0;\nextern const int cGatherGoalPlanCostRPGPct = 1;\nextern const int cGatherGoalPlanGathererPct = 2;\nextern const int cGatherGoalPlanNumFoodPlans = 3;\nextern const int cGatherGoalPlanNumWoodPlans = 4;\nextern const int cGatherGoalPlanNumGoldPlans = 5;\nextern const int cGatherGoalPlanMinResourceAmt = 6;\nextern const int cGatherGoalPlanResourceCostWeight = 7;\nextern const int cGatherGoalPlanFarmLimitPerPlan = 8;\nextern const int cGatherGoalPlanMaxFarmLimit = 9;\nextern const int cGatherGoalPlanResourceSkew = 10;\n</code></pre>"},{"location":"reference/constants/plans/gather-plans/","title":"Gather Plan Variable Indexes","text":"<p><code>cpp title=\"Gather Plan Variable Indexes extern const int cGatherPlanKBResourceID = 0; extern const int cGatherPlanResourceID = 1; extern const int cGatherPlanResourceType = 2; extern const int cGatherPlanResourceSubType = 3; extern const int cGatherPlanBreakDownID = 4; extern const int cGatherPlanResourceUnitTypeFilter = 5; extern const int cGatherPlanFindNewResourceTimeOut = 6; extern const int cGatherPlanQuitWhenResourceIsInvalid = 7;</code></p>"},{"location":"reference/constants/plans/goal-plans/","title":"Goal Plan Variable Indexes","text":"Goal Plan Variable Indexes<pre><code>extern const int cGoalPlanGoalType = 0;\nextern const int cGoalPlanGoalSubType = 1;\nextern const int cGoalPlanMinTime = 2;\nextern const int cGoalPlanMaxTime = 3;\nextern const int cGoalPlanMinAge = 4;\nextern const int cGoalPlanMaxAge = 5;\nextern const int cGoalPlanRepeat = 6;\nextern const int cGoalPlanExecuteCount = 7;\nextern const int cGoalPlanDoneGoal = 8;\nextern const int cGoalPlanFailGoal = 9;\nextern const int cGoalPlanExecuteGoal = 10;\nextern const int cGoalPlanAutoUpdateState = 11;\nextern const int cGoalPlanAutoUpdateBase = 12;\nextern const int cGoalPlanAutoUpdateAttackPlayerID = 13;\nextern const int cGoalPlanTargetType = 14;\nextern const int cGoalPlanTarget = 15;\nextern const int cGoalPlanTargetPoint = 16;\nextern const int cGoalPlanTargetNumber = 17;\nextern const int cGoalPlanMinUnitNumber = 18;\nextern const int cGoalPlanMaxUnitNumber = 19;\nextern const int cGoalPlanUnitPickerID = 20;\nextern const int cGoalPlanUnitPickerFrequency = 21;\nextern const int cGoalPlanUnitPickerTime = 22;\nextern const int cGoalPlanAttackPlayerID = 23;\nextern const int cGoalPlanAttackStartFrequency = 24;\nextern const int cGoalPlanAttackStartTime = 25;\nextern const int cGoalPlanUnitTypeID = 26;\nextern const int cGoalPlanBaseID = 27;\nextern const int cGoalPlanAllowRetreat = 28;\nextern const int cGoalPlanUpgradeBuilding = 29;\nextern const int cGoalPlanSetAreaGroups = 30;\nextern const int cGoalPlanIdleAttack = 31;\nextern const int cGoalPlanAreaGroupID = 32;\nextern const int cGoalPlanFunctionID = 33;\nextern const int cGoalPlanFunctionParm = 34;\nextern const int cGoalPlanBuildingTypeID = 35;\nextern const int cGoalPlanBuildingPlacementID = 36;\nextern const int cGoalPlanBuildingSearchID = 37;\nextern const int cGoalPlanActiveHealthTypeID = 38;\nextern const int cGoalPlanActiveHealth = 39;\nextern const int cGoalPlanAttackRoutePatternType = 40;\nextern const int cGoalPlanUpgradeFilterType = 41;\nextern const int cGoalPlanReservePlanID = 42;\nextern const int cGoalPlanFindBestOpp = 43;\nextern const int cGoalPlanMinOppScoreForGo = 44;\nextern const int cGoalPlanOppScoreStep = 45;\nextern const int cGoalPlanOppScoreTimeout = 46;\n</code></pre>"},{"location":"reference/constants/plans/goal-plans/goal-subtypes/","title":"Goal Plans Goal SubTypes","text":"Goal Plans Goal SubTypes<pre><code>extern const int cGoalPlanGoalSubTypeEmpty1 = 0;\nextern const int cGoalPlanGoalSubTypeEmpty2 = 1;\n</code></pre>"},{"location":"reference/constants/plans/goal-plans/goal-types/","title":"Goal Plan Goal Types","text":"Goal Plan Goal Types<pre><code>extern const int cGoalPlanGoalTypeForwardBase = 0;\nextern const int cGoalPlanGoalTypeCreateBase = 1;\nextern const int cGoalPlanGoalTypeMainBase = 2;\nextern const int cGoalPlanGoalTypeAttack = 3;\nextern const int cGoalPlanGoalTypeDefend = 4;\nextern const int cGoalPlanGoalTypeTrain = 5;\nextern const int cGoalPlanGoalTypeMaintain = 6;\nextern const int cGoalPlanGoalTypeResearch = 7;\nextern const int cGoalPlanGoalTypeAge = 8;\nextern const int cGoalPlanGoalTypeCallback = 9;\nextern const int cGoalPlanGoalTypeBuilding = 10;\n</code></pre>"},{"location":"reference/constants/plans/goal-plans/target-types/","title":"Goal Plan Target Types","text":"Goal Plan Target Types<pre><code>extern const int cGoalPlanTargetTypeArea = 0;\nextern const int cGoalPlanTargetTypeAreaGroup = 1;\nextern const int cGoalPlanTargetTypePoint = 2;\nextern const int cGoalPlanTargetTypeUnitType = 3;\nextern const int cGoalPlanTargetTypeUnit = 4;\nextern const int cGoalPlanTargetTypePlayer = 5;\nextern const int cGoalPlanTargetTypePlayerRelation = 6;\nextern const int cGoalPlanTargetTypeTech = 7;\n</code></pre>"},{"location":"reference/constants/plans/herd-plans/","title":"Herd Plan Variable Indexes","text":"Herd Plan Variable Indexes<pre><code>extern const int cHerdPlanBuildingID = 0;\nextern const int cHerdPlanBuildingTypeID = 1;\nextern const int cHerdPlanDistance = 2;\nextern const int cHerdPlanUseMultipleBuildings = 3;\n</code></pre>"},{"location":"reference/constants/plans/mission-plans/","title":"Mission Plan Variable Indexes","text":"Mission Plan Variable Indexes<pre><code>extern const int cMissionPlanPlanID = 0;\nextern const int cMissionPlanType = 1;\nextern const int cMissionPlanStartTime = 2;\nextern const int cMissionPlanTarget = 3;\nextern const int cMissionPlanVector1 = 4;\nextern const int cMissionPlanVector2 = 5;\nextern const int cMissionPlanFloat1 = 6;\nextern const int cMissionPlanFloat2 = 7;\nextern const int cMissionPlanOpportunityID = 8;\n</code></pre>"},{"location":"reference/constants/plans/mission-plans/mission-types/","title":"Mission Types","text":"Mission Types<pre><code>extern const int cMissionTypeNone = -1;\nextern const int cMissionTypeAttack = 0;\nextern const int cMissionTypeDefend = 1;\nextern const int cMissionTypeClaim = 2;\nextern const int cMissionTypeRaid = 3;\n</code></pre>"},{"location":"reference/constants/plans/native-research-plans/","title":"Native Research Plan Variable Indexes","text":"Native Research Plan Variable Indexes<pre><code>extern const int cNativeResearchPlanBuildingID = 0;\nextern const int cNativeResearchPlanTacticID = 1;\n</code></pre>"},{"location":"reference/constants/plans/nugget-plans/","title":"Nugget Plan Variable Indexes","text":"Nugget Plan Variable Indexes<pre><code>extern const int cNuggetPlanGatherDistance = 0;\nextern const int cNuggetPlanGatherPercentage = 1;\nextern const int cNuggetPlanMaxGuardianStrength = 2;\nextern const int cNuggetPlanTargetNuggetID = 3;\nextern const int cNuggetPlanTargetGatherPosition = 4;\n</code></pre>"},{"location":"reference/constants/plans/progression-plans/","title":"Progression Plan Variable Indexes","text":"Progression Plan Variable Indexes<pre><code>extern const int cProgressionPlanPollingTime = 0;\nextern const int cProgressionPlanProgressionID = 1;\nextern const int cProgressionPlanTrainUnitAtEnd = 2;\nextern const int cProgressionPlanNumGoalUnitsToBuild = 3;\nextern const int cProgressionPlanGoalUnitID = 4;\nextern const int cProgressionPlanGoalTechID = 5;\nextern const int cProgressionPlanBuildAreaID = 6;\nextern const int cProgressionPlanCurrentGoalID = 7;\nextern const int cProgressionPlanCurrentGoalType = 8;\nextern const int cProgressionPlanCurrentStep = 9;\nextern const int cProgressionPlanCurrentStepPlanID = 10;\nextern const int cProgressionPlanPaused = 11;\nextern const int cProgressionPlanAdvanceOneStep = 12;\nextern const int cProgressionPlanRunInParallel = 13;\nextern const int cProgressionPlanChildProgressions = 14;\nextern const int cProgressionPlanBuildingPref = 15;\n</code></pre>"},{"location":"reference/constants/plans/repair-plans/","title":"Repair Plan Variable Indexes","text":"Repair Plan Variable Indexes<pre><code>extern const int cRepairPlanTargetID = 0;\nextern const int cRepairPlanPersistent = 1;\n</code></pre>"},{"location":"reference/constants/plans/research-plans/","title":"Research Plan Variable Indexes","text":"Research Plan Variable Indexes<pre><code>extern const int cResearchPlanBuildingID = 0;\nextern const int cResearchPlanBuildingTypeID = 1;\nextern const int cResearchPlanTechID = 2;\nextern const int cResearchPlanBuildingAbstractTypeID = 3;\nextern const int cResearchPlanDestroyWhenBuildingIsGone = 4;\nextern const int cResearchPlanProtoUnitCommandID = 5;\n</code></pre>"},{"location":"reference/constants/plans/reserve-plans/","title":"Reserve Plan Variable Indexes","text":"Reserve Plan Variable Indexes<pre><code>extern const int cReservePlanPlanType = 0;\n</code></pre>"},{"location":"reference/constants/plans/tower-plans/","title":"Tower Plan Variable Indexes","text":"Tower Plan Variable Indexes<pre><code>extern const int cTowerPlanCenterLocation = 0;\nextern const int cTowerPlanAreaID = 1;\nextern const int cTowerPlanDistanceFromCenter = 2;\nextern const int cTowerPlanMaximizeLOS = 3;\nextern const int cTowerPlanMaximizeAttack = 4;\nextern const int cTowerPlanNumberToBuild = 5;\nextern const int cTowerPlanBuildLocations = 6;\nextern const int cTowerPlanProtoIDToBuild = 7;\nextern const int cTowerPlanAttackLOSModifier = 8;\nextern const int cTowerPlanLOSModifier = 9;\n</code></pre>"},{"location":"reference/constants/plans/trade-plans/","title":"Trade Plan Variable Indexes","text":"Trade Plan Variable Indexes<pre><code>extern const int cTradePlanTargetUnitTypeID = 0;\nextern const int cTradePlanTargetUnitID = 1;\nextern const int cTradePlanStartPosition = 2;\nextern const int cTradePlanTradeUnitType = 3;\nextern const int cTradePlanTradeUnitTypeMax = 4;\nextern const int cTradePlanMarketID = 5;\n</code></pre>"},{"location":"reference/constants/plans/train-plans/","title":"Train Plan Variable Indexes","text":"Train Plan Variable Indexes<pre><code>extern const int cTrainPlanBuildingID = 0;\nextern const int cTrainPlanIntoArmyID = 1;\nextern const int cTrainPlanIntoPlanID = 2;\nextern const int cTrainPlanIntoBaseID = 3;\nextern const int cTrainPlanNumberToTrain = 4;\nextern const int cTrainPlanNumberToMaintain = 5;\nextern const int cTrainPlanNumberTrained = 6;\nextern const int cTrainPlanUnitType = 7;\nextern const int cTrainPlanBuildFromType = 8;\nextern const int cTrainPlanTrainedUnitID = 9;\nextern const int cTrainPlanFrequency = 10;\nextern const int cTrainPlanUseMultipleBuildings = 11;\nextern const int cTrainPlanGatherPoint = 12;\nextern const int cTrainPlanGatherTargetID = 13;\nextern const int cTrainPlanMaintainBaseID = 14;\nextern const int cTrainPlanMaintainAreaID = 15;\nextern const int cTrainPlanBatchSize = 16;\nextern const int cTrainPlanMaxQueueSize = 17;\n</code></pre>"},{"location":"reference/constants/plans/transport-plans/","title":"Transport Plan Variable Indexes","text":"Transport Plan Variable Indexes<pre><code>extern const int cTransportPlanTransportID = 0;\nextern const int cTransportPlanTransportTypeID = 1;\nextern const int cTransportPlanGatherPoint = 2;\nextern const int cTransportPlanTargetPoint = 3;\nextern const int cTransportPlanGatherAreaGroup = 4;\nextern const int cTransportPlanTargetAreaGroup = 5;\nextern const int cTransportPlanGatherArea = 6;\nextern const int cTransportPlanTargetArea = 7;\nextern const int cTransportPlanPathType = 8;\nextern const int cTransportPlanPathPlanned = 9;\nextern const int cTransportPlanReturnWhenDone = 10;\nextern const int cTransportPlanMaximizeXportMovement = 11;\nextern const int cTransportPlanUnitsMoved = 12;\nextern const int cTransportPlanIgnoreAreaIDs = 13;\nextern const int cTransportPlanBestDangerArea = 14;\nextern const int cTransportPlanBestDangerValue = 15;\nextern const int cTransportPlanDropOffPoint = 16;\nextern const int cTransportPlanPersistent = 17;\nextern const int cTransportPlanMiddleAreaGroups = 18;\nextern const int cTransportPlanTakeMoreUnits = 19;\n</code></pre>"},{"location":"reference/constants/plans/transport-plans/path-types/","title":"Transport Plan Path Types","text":"Transport Plan Path Types<pre><code>extern const int cTransportPathTypePoints = 0;\nextern const int cTransportPathTypeAreas = 1;\n</code></pre>"},{"location":"reference/constants/resource-gathering/gatherer-limit/","title":"Gatherer Limit Constants","text":"<p>These constants are probably hardcoded</p> <p>It is possible to change the gatherer limit in the techtree, and these constants might not reflect that. Some mods may as well make custom mines and farms that have a different base limit.</p> Gatherer Limit Constants<pre><code>extern const int cMaxSettlersPerMine = 20;\nextern const int cMaxSettlersPerMill = 10;\n</code></pre>"},{"location":"reference/constants/resource-gathering/resource-subtypes/","title":"Resource SubType Constants","text":"<p>The following constants are used to identify resource subtypes.</p> Resource SubType Constants<pre><code>// Berry Bush, Mill, Crate\nextern const int cAIResourceSubTypeEasy = 0;\n// Herdable. Does not seem to work.\nextern const int cAIResourceSubTypeHerdable = 1;\n// Huntable that doesn't fight back.\nextern const int cAIResourceSubTypeHunt = 2;\n// Huntable that fights back. Does not seem to work.\nextern const int cAIResourceSubTypeHuntAggressive = 3;\n// Farm. Does not seem to work.\nextern const int cAIResourceSubTypeFarm = 4;\n// Fish and Whale. Does not seem to work.\nextern const int cAIResourceSubTypeFish = 5;\n// Export. Does not seem to work.\nextern const int cAIResourceSubTypeTrade = 6;\n</code></pre>"},{"location":"reference/constants/resource-gathering/rgp/","title":"Resource Gathering Systems","text":"<p>The following constants are used to identify Resource Gathering Systems.</p> Resource Gathering Systems<pre><code>// Script-based gatherer allocation. The entire calculation is\n// written in the AI script.\nextern const int cRGPScript = 0;\n\n// Cost-based gatherer allocation. The formula is hidden in the\n// game itself but can be influenced by assigning costs to each\n// resource type.\nextern const int cRGPCost = 1;\n\n// Weighted average of the above.\nextern const int cRGPActual = 2;\n</code></pre>"},{"location":"reference/constants/resource-gathering/ts-factor/","title":"TargetSelector Factor Constants","text":"TargetSelector Factor Constants<pre><code>extern const int cTSFactorDistance = 0;\nextern const int cTSFactorPoint = 1;\nextern const int cTSFactorTimeToDone = 2;\nextern const int cTSFactorBase = 3;\nextern const int cTSFactorDanger = 4;\nextern const int cTSFactorDistanceToEdge = 5;\n</code></pre>"},{"location":"reference/constants/sockets/socket-states/","title":"Socket States","text":"Socket States<pre><code>extern const int cVPStateAny = -1;\nextern const int cVPStateNone = 0;\nextern const int cVPStateSite = 1;\nextern const int cVPStateBuilding = 2;\nextern const int cVPStateCompleted = 3;\n</code></pre>"},{"location":"reference/constants/sockets/socket-types/","title":"Socket Types","text":"Socket Types<pre><code>extern const int cVPInvalid = -2;\nextern const int cVPAll = -1;\nextern const int cVPNative = 0;\nextern const int cVPSecret = 1;\nextern const int cVPTrade = 2;\nextern const int cVPConqueror = 3;\nextern const int cVPGranted = 4;\n</code></pre>"},{"location":"reference/constants/techs/tech-statuses/","title":"Tech Statuses","text":"Tech Statuses<pre><code>extern const int cTechStatusUnobtainable = 0;\nextern const int cTechStatusObtainable = 1;\nextern const int cTechStatusActive = 2;\n</code></pre>"},{"location":"reference/constants/units/abstract-unit-types/","title":"Abstract Unit Types","text":"<p>Actual values might differ from person to person</p> <p>Abstract unit types are defined right after the end of protounits in the proto XML file. Since mods can add or remove units, unit type IDs can change. That is why there is no value here.</p> Abstract Unit Types<pre><code>extern const int cUnitTypeUnit;\nextern const int cUnitTypeShip;\nextern const int cUnitTypeBuilding;\nextern const int cUnitTypeMilitaryBuilding;\nextern const int cUnitTypeEconomicBuilding;\nextern const int cUnitTypeDropsite;\nextern const int cUnitTypeResource;\nextern const int cUnitTypeHuntedResource;\nextern const int cUnitTypeMinedResource;\nextern const int cUnitTypeLandResource;\nextern const int cUnitTypeWaterResource;\nextern const int cUnitTypeProjectile;\nextern const int cUnitTypeNature;\nextern const int cUnitTypeSpecialPowers;\nextern const int cUnitTypeUnattackable;\nextern const int cUnitTypeAbstractTemple;\nextern const int cUnitTypeMilitary;\nextern const int cUnitTypeHero;\nextern const int cUnitTypeTree;\nextern const int cUnitTypeAbstractInfantry;\nextern const int cUnitTypeAbstractCavalry;\nextern const int cUnitTypeAbstractArcher;\nextern const int cUnitTypeAbstractVillager;\nextern const int cUnitTypeAbstractFarm;\nextern const int cUnitTypeAbstractDock;\nextern const int cUnitTypeInventoryHolder;\nextern const int cUnitTypeInventoryItem;\nextern const int cUnitTypeUseableItem;\nextern const int cUnitTypeStrengthBonus;\nextern const int cUnitTypeTradeableTo;\nextern const int cUnitTypeTradeableFrom;\nextern const int cUnitTypeAbstractSiegeWeapon;\nextern const int cUnitTypeFlyingUnit;\nextern const int cUnitTypeMythUnit;\nextern const int cUnitTypeEconomic;\nextern const int cUnitTypeRanged;\nextern const int cUnitTypeFastSpeed;\nextern const int cUnitTypeAverageSpeed;\nextern const int cUnitTypeSlowSpeed;\nextern const int cUnitTypeGeneric;\nextern const int cUnitTypeUnitClass;\nextern const int cUnitTypeBuildingClass;\nextern const int cUnitTypeNatureClass;\nextern const int cUnitTypeEmbellishmentClass;\nextern const int cUnitTypeTestClass;\nextern const int cUnitTypeE3Class;\nextern const int cUnitTypeAll;\nextern const int cUnitTypeActionGather;\nextern const int cUnitTypeActionTrain;\nextern const int cUnitTypeActionBuild;\nextern const int cUnitTypeActionAttack;\nextern const int cUnitTypeActionTrickle;\nextern const int cUnitTypeFish;\nextern const int cUnitTypeTransport;\nextern const int cUnitTypeAbstractWall;\nextern const int cUnitTypeHerdable;\nextern const int cUnitTypeAbstractSettlement;\nextern const int cUnitTypeBuildingsThatShoot;\nextern const int cUnitTypeMythUnitGodPower;\nextern const int cUnitTypeParticipatesInBattlecries;\nextern const int cUnitTypeAffectedByTownBell;\nextern const int cUnitTypeMinimapFilterMilitary;\nextern const int cUnitTypeMinimapFilterEconomic;\nextern const int cUnitTypeTradeUnit;\nextern const int cUnitTypeHealable;\nextern const int cUnitTypeFavoriteUnit;\nextern const int cUnitTypeRailroadUnit;\nextern const int cUnitTypeAbstractRailroadStation;\nextern const int cUnitTypeAbstractFort;\nextern const int cUnitTypeAbstractImperialArmy;\nextern const int cUnitTypeAbstractResourceCrate;\nextern const int cUnitTypeAbstractArtillery;\nextern const int cUnitTypeAbstractCavalryInfantry;\nextern const int cUnitTypeAbstractPet;\nextern const int cUnitTypeConvertsHerds;\nextern const int cUnitTypeSocket;\nextern const int cUnitTypeAircraft;\nextern const int cUnitTypeAbstractLightInfantry;\nextern const int cUnitTypeAbstractHeavyCavalry;\nextern const int cUnitTypeHuntable;\nextern const int cUnitTypeGuardian;\nextern const int cUnitTypeAbstractSiegeTrooper;\nextern const int cUnitTypeAbstractCommunityPlaza;\nextern const int cUnitTypeAbstractCanSeeStealth;\nextern const int cUnitTypeMercenary;\nextern const int cUnitTypeAbstractWarShip;\nextern const int cUnitTypeAbstractLightCavalry;\nextern const int cUnitTypeAbstractTradeMarket;\nextern const int cUnitTypeAbstractShrine;\nextern const int cUnitTypeAbstractWonder;\nextern const int cUnitTypeAbstractTypeHuntableMagnet;\nextern const int cUnitTypeAbstractTypeHerdableMagnet;\nextern const int cUnitTypeAbstractBannerArmy;\nextern const int cUnitTypeAbstractMonk;\nextern const int cUnitTypeAbstractZamburak;\nextern const int cUnitTypeAbstractSepoy;\nextern const int cUnitTypeAbstractRajput;\nextern const int cUnitTypeAbstractUrumi;\nextern const int cUnitTypeAbstractSowar;\nextern const int cUnitTypeAbstractMahout;\nextern const int cUnitTypeAbstractHowdah;\nextern const int cUnitTypeAbstractMercFlailiphant;\nextern const int cUnitTypeAbstractSiegeElephant;\nextern const int cUnitTypeTrade;\nextern const int cUnitTypeXP;\nextern const int cUnitTypeAbstractDaimyo;\nextern const int cUnitTypeAbstractElephant;\nextern const int cUnitTypeAbstractCamel;\nextern const int cUnitTypeAbstractMilitaryWonder;\nextern const int cUnitTypeAbstractPoliticalWonder;\nextern const int cUnitTypeAbstractReligiousWonder;\nextern const int cUnitTypeAbstractHandElephant;\nextern const int cUnitTypeAbstractGurkha;\nextern const int cUnitTypeAbstractMansabdar;\nextern const int cUnitTypeAbstractChineseMonk;\nextern const int cUnitTypeAbstractGunpowderTrooper;\nextern const int cUnitTypeAbstractHandInfantry;\nextern const int cUnitTypeAbstractHeavyInfantry;\nextern const int cUnitTypeAbstractNativeWarrior;\nextern const int cUnitTypeAbstractRangedInfantry;\nextern const int cUnitTypeAbstractRangedCavalry;\nextern const int cUnitTypeAbstractHandCavalry;\nextern const int cUnitTypeAbstractGunpowderCavalry;\nextern const int cUnitTypeAbstractFishingBoat;\nextern const int cUnitTypeGiantBuddha;\nextern const int cUnitTypeWaterGuardian;\nextern const int cUnitTypeCannotConvertHill;\nextern const int cUnitTypeAbstractJapaneseMonk;\nextern const int cUnitTypeFame;\nextern const int cUnitTypeAbstractFoodCrate;\nextern const int cUnitTypeAbstractWoodCrate;\nextern const int cUnitTypeAbstractCoinCrate;\nextern const int cUnitTypeAbstractGrenadier;\nextern const int cUnitTypeAbstractDoubleVillager;\nextern const int cUnitTypeAbstractInfiniteCrate;\nextern const int cUnitTypeGold;\nextern const int cUnitTypeAnimalPrey;\nextern const int cUnitTypeFood;\nextern const int cUnitTypeWood;\nextern const int cUnitTypeFoodDropsite;\nextern const int cUnitTypeHack;\nextern const int cUnitTypeWoodDropsite;\nextern const int cUnitTypeGoldDropsite;\nextern const int cUnitTypeLogicalTypeVillagersRespondToAttack;\nextern const int cUnitTypeLogicalTypeHandUnitsAutoAttack;\nextern const int cUnitTypeLogicalTypeVillagersAttack;\nextern const int cUnitTypeLogicalTypeNeededForVictory;\nextern const int cUnitTypeLogicalTypeAffectedByTownBell;\nextern const int cUnitTypeNativeBuilding;\nextern const int cUnitTypeAbstractHouse;\nextern const int cUnitTypeLogicalTypeEasySelectAvoid;\nextern const int cUnitTypeColonyBuilding;\nextern const int cUnitTypeLogicalTypeLandMilitary;\nextern const int cUnitTypeLogicalTypeNavalMilitary;\nextern const int cUnitTypeLogicalTypeGarrisonInShips;\nextern const int cUnitTypeAbstractPikeman;\nextern const int cUnitTypeAbstractMine;\nextern const int cUnitTypeLifespanUnit;\nextern const int cUnitTypeTradePostSocket;\nextern const int cUnitTypeNativeSocket;\nextern const int cUnitTypeHasBountyValue;\nextern const int cUnitTypeAbstractLancer;\nextern const int cUnitTypeValidIdleVillager;\nextern const int cUnitTypeMercType2;\nextern const int cUnitTypeMercType3;\nextern const int cUnitTypeMercType4;\nextern const int cUnitTypeMercType5;\nextern const int cUnitTypeVictoryPointBuilding;\nextern const int cUnitTypeLogicalTypeBuildingsNotWalls;\nextern const int cUnitTypeLogicalTypeValidSPCUnitsDeadCondition;\nextern const int cUnitTypeAbstractTownCenter;\nextern const int cUnitTypeLogicalTypeTCBuildLimit;\nextern const int cUnitTypeCountsTowardEconomicScore;\nextern const int cUnitTypeCountsTowardMilitaryScore;\nextern const int cUnitTypeLogicalTypeRangedUnitsAttack;\nextern const int cUnitTypeLogicalTypeRangedUnitsAutoAttack;\nextern const int cUnitTypeLogicalTypeHandUnitsAttack;\nextern const int cUnitTypeLogicalTypeValidSharpshoot;\nextern const int cUnitTypeAbstractFruit;\nextern const int cUnitTypeAbstractNugget;\nextern const int cUnitTypeMercType1;\nextern const int cUnitTypeLogicalTypeMinimapFilterEconomic;\nextern const int cUnitTypeLogicalTypeMinimapFilterMilitary;\nextern const int cUnitTypeLogicalTypeScout;\nextern const int cUnitTypeLogicalTypeShipsAndBuildings;\nextern const int cUnitTypeLogicalTypeHealed;\nextern const int cUnitTypeAbstractWagon;\nextern const int cUnitTypeAbstractWhale;\nextern const int cUnitTypeAbstractFish;\nextern const int cUnitTypeAbstractHandSiege;\nextern const int cUnitTypeAbstractIndianMonk;\nextern const int cUnitTypeAbstractJunk;\nextern const int cUnitTypeAbstractConsulateUnit;\nextern const int cUnitTypeAbstractConsulateSiegeFortress;\nextern const int cUnitTypeAbstractConsulateSiegeIndustrial;\nextern const int cUnitTypeAbstractAgraFort;\nextern const int cUnitTypeAbstractWokou;\nextern const int cUnitTypeAbstractIrregular;\nextern const int cUnitTypeAbstractCaptureable;\nextern const int cUnitTypeAbstractBarracks2;\nextern const int cUnitTypeAbstractStables;\nextern const int cUnitTypeAbstractFoundry;\nextern const int cUnitTypeAbstractConsulateUnitColonial;\nextern const int cUnitTypeAbstractCoyoteMan;\nextern const int cUnitTypeWater;\nextern const int cUnitTypeAbstractNuggetLand;\nextern const int cUnitTypeAbstractNuggetWater;\nextern const int cUnitTypeLogicalTypeValidSabotage;\nextern const int cUnitTypeAbstractPig;\nextern const int cUnitTypeLogicalTypeBuildingsNotWallsOrGroves;\nextern const int cUnitTypeAbstractHealer;\nextern const int cUnitTypeAbstractDinghy;\nextern const int cUnitTypeAbstractBank;\nextern const int cUnitTypeAbstractChurch;\nextern const int cUnitTypeAbstractMercenaryBuilding;\nextern const int cUnitTypeAbstractFindBarracks;\nextern const int cUnitTypeAbstractFindFort;\nextern const int cUnitTypeAbstractOutpost;\nextern const int cUnitTypeAbstractTradingPost;\nextern const int cUnitTypeAbstractFindOtherMilitaryBuilding;\nextern const int cUnitTypeAbstractFindOtherEconomicBuilding;\nextern const int cUnitTypeAbstractFindMilitaryWonder;\nextern const int cUnitTypeAbstractFindEconomicWonder;\nextern const int cUnitTypeAbstractFindScout;\nextern const int cUnitTypeLogicalTypeLandEconomy;\nextern const int cUnitTypeAbstractBerryBush;\nextern const int cUnitTypeAnimalGuardian;\nextern const int cUnitTypeExclusiveUniqueUnit;\nextern const int cUnitTypeAbstractRangedHeavyCavalry;\nextern const int cUnitTypeAbstractFindHealer;\nextern const int cUnitTypeAbstractMarket;\nextern const int cUnitTypeAbstractGatherAfterBuild;\nextern const int cUnitTypeAbstractCallMinutemen;\nextern const int cUnitTypeAbstractRifleman;\nextern const int cUnitTypeAbstractFootArcher;\nextern const int cUnitTypeAbstractMusketeer;\nextern const int cUnitTypeAbstractOutlaw;\nextern const int cUnitTypeAbstractArchaicInfantry;\nextern const int cUnitTypeLogicalTypeSettlerBuildLimit;\nextern const int cUnitTypeLogicalTypePickableMerc;\nextern const int cUnitTypeAbstractXPCrate;\nextern const int cUnitTypeLogicalTypePickableOutlaw;\nextern const int cUnitTypeHCGatherPointPri1;\nextern const int cUnitTypeHCGatherPointPri2;\nextern const int cUnitTypeHCGatherPointPri3;\nextern const int cUnitTypeInfluence;\nextern const int cUnitTypeAbstractLivestockMarket;\nextern const int cUnitTypeAbstractField;\nextern const int cUnitTypeAbstractAfricanHero;\nextern const int cUnitTypeCapturableTradingPost;\nextern const int cUnitTypeExcludeFromRansom;\nextern const int cUnitTypeAbstractEmpowerer;\nextern const int cUnitTypeAbstractCaprine;\nextern const int cUnitTypeAbstractBovine;\nextern const int cUnitTypeAbstractTradeCrate;\nextern const int cUnitTypeAbstractTradeFoodCrate;\nextern const int cUnitTypeAbstractTradeWoodCrate;\nextern const int cUnitTypeAbstractTradeCoinCrate;\nextern const int cUnitTypeDrawsGatherers;\nextern const int cUnitTypeColonialMercenary;\nextern const int cUnitTypeFortressMercenary;\nextern const int cUnitTypeIndustrialMercenary;\nextern const int cUnitTypeEconomicUnit;\nextern const int cUnitTypeAbstractCallRaiders;\nextern const int cUnitTypeAbstractAbusGun;\nextern const int cUnitTypeAbstractCountAsGatherer;\nextern const int cUnitTypeLogicalTypeAccumulateMinedResources;\nextern const int cUnitTypeAbstractBerberNomad;\nextern const int cUnitTypeAbstractLightHandInfantry;\nextern const int cUnitTypeAbstractMeleeSkirmisher;\nextern const int cUnitTypeNone;\nextern const int cUnitTypeAbstractMapControlBuilding;\nextern const int cUnitTypeLogicalTypeInfantryVolleyTactic;\nextern const int cUnitTypeAbstractRangedShockInfantry;\nextern const int cUnitTypeCountsTowardEconomyModeScore;\nextern const int cUnitTypeLogicalTypeValidSPCBuildingsDeadCondition;\nextern const int cUnitTypeAbstractHandInfantryMerc;\nextern const int cUnitTypeAbstractHandCavalryMerc;\nextern const int cUnitTypeAgeUpBuilding;\nextern const int cUnitTypeAbstractFreeBuilder;\nextern const int cUnitTypeCapturableSocket;\nextern const int cUnitTypeLogicalTypeRangedUnitsAutoAttackNoVillagers;\nextern const int cUnitTypeInvestmentBuilding;\nextern const int cUnitTypeTowerSocket;\nextern const int cUnitTypeAbstractSPCVillageBuilding;\nextern const int cUnitTypeValidColonyBuilding;\nextern const int cUnitTypeAbstractSkirmisher;\nextern const int cUnitTypeAbstractCounterSkirmisher;\nextern const int cUnitTypeAbstractBasilicaUnit;\nextern const int cUnitTypeLogicalTypePickableMercOutlaw;\nextern const int cUnitTypeAbstractSPCEuroTower;\nextern const int cUnitTypeDisplayAbilitiesOnHUD;\nextern const int cUnitTypeAbstractDefensiveBuilding;\nextern const int cUnitTypeLogicalTypeBuildingsHasRangedAttack;\nextern const int cUnitTypeLogicalTypeBuildingsNoRangedAttack;\nextern const int cUnitTypeLogicalTypeMalteseCivBonus;\nextern const int cUnitTypeAbstractCrossbowman;\nextern const int cUnitTypeLogicalTypeAffectedByVillagerUpgrades;\nextern const int cUnitTypeLogicalTypeMalteseCivBonusArtilleryAndShips;\nextern const int cUnitTypeLogicalTypeImmuneToSharpshoot;\nextern const int cUnitTypeLogicalTypeMalteseCivBonusHealsWhenIdle;\nextern const int cUnitTypeAbstractMountainMonastery;\nextern const int cUnitTypeAbstractFishOrWhale;\nextern const int cUnitTypeAbstractFarmBuilding;\nextern const int cUnitTypeLogicalTypeRomanTactics;\nextern const int cUnitTypeBuildsWonders;\nextern const int cUnitTypeMilitaryProductionBuilding;\nextern const int cUnitTypeAbstractTorp;\nextern const int cUnitTypeLogicalTypeImprovedByWaterCeremony;\nextern const int cUnitTypeAbstractConsulate;\nextern const int cUnitTypeAbstractResourceEnclosure;\n</code></pre>"},{"location":"reference/constants/units/unit-states/","title":"Unit States","text":"Unit States<pre><code>extern const int cUnitStateNone = 0;\nextern const int cUnitStateBuilding = 1;\nextern const int cUnitStateAlive = 2;\nextern const int cUnitStateDead = 4;\nextern const int cUnitStateQueued = 8;\nextern const int cUnitStateAny = 255;\nextern const int cUnitStateABQ = 11;\n</code></pre>"},{"location":"reference/functions/ai/","title":"Built-in AI Functions","text":""},{"location":"reference/functions/kb/","title":"Built-in KB Functions","text":""},{"location":"reference/functions/xs/","title":"Built-in XS Functions","text":""},{"location":"xs/","title":"The XS Language","text":"<p>Already familiar with XS?</p> <p>If you are already familiar with XS or a language similar to C/C++, you may want to jump directly to the AI Scripting part.</p> <p>XS is the language used in AOE3 to control the AI, to create custom maps and to create custom triggers. Using the XS language, AOE3 modders can write code in a text file called a script (AI script, RM script, TR script), which the game can load, read and execute. The process of writing a script is called scripting.</p> <p>This guide focuses primarily on AI scripting, but the knowledge acquired through this part of the guide is applicable to RM and TR scripting as well.</p>"},{"location":"xs/arrays/","title":"Arrays","text":"<p>Arrays allow you to store multiple values in a single variable. They are useful for storing lists of things, e.g. a list of units you want the AI to train.</p>"},{"location":"xs/arrays/#1-creating-an-array","title":"1. Creating an array","text":"<p>To create an array, you need to use one of the following functions (depending on the data type you want to store):</p> <p>Signatures of <code>xsArrayCreate</code> functions</p> <pre><code>// Creates a sized and named boolean array, returning an arrayID.\nint xsArrayCreateBool(int size = -1, bool defaultValue = false, string name = \"\");\n\n// Creates a sized and named integer array, returning an arrayID.\nint xsArrayCreateInt(int size = -1, int defaultValue = 0, string name = \"\");\n\n// Creates a sized and named float array, returning an arrayID.\nint xsArrayCreateFloat(int size = -1, float defaultValue = 0.0, string name = \"\");\n\n// Creates a sized and named string array, returning an arrayID.\nint xsArrayCreateString(int size = -1, string defaultValue = \"\", string name = \"\");\n\n// Creates a sized and named vector array, returning an arrayID.\nint xsArrayCreateVector(int size = -1, vector defaultValue = cInvalidVector, string name = \"\");\n</code></pre>"},{"location":"xs/arrays/#11-array-size","title":"1.1. Array size","text":"<p>The <code>size</code> parameter specifies how many elements the array should have. It is not possible to add more elements to an array than its size. If you want to add more elements to an array, you need to use the <code>xsArrayResize</code> functions.</p>"},{"location":"xs/arrays/#12-array-name","title":"1.2. Array name","text":"<p>This is used for debugging purposes, and must be unique. It can be a concise name or a slightly longer description of what the array is used for.</p>"},{"location":"xs/arrays/#13-array-default-value","title":"1.3. Array default value","text":"<p>This is the value that will be assigned to each element of the array when it is created. Until you assign a different value to an element, it will have this value.</p>"},{"location":"xs/arrays/#2-accessing-array-elements","title":"2. Accessing array elements","text":"<p>To access an element of an array, you need to use one of the following functions (depending on the data type the array stores):</p> <p>Signatures of <code>xsArrayGet</code> functions</p> <pre><code>// Returns the value at the specified index in the requested array.\nbool xsArrayGetBool(int arrayID = -1, int index = -1);\nint xsArrayGetInt(int arrayID = -1, int index = -1);\nfloat xsArrayGetFloat(int arrayID = -1, int index = -1);\nstring xsArrayGetString(int arrayID = -1, int index = -1);\nvector xsArrayGetVector(int arrayID = -1, int index = -1);\n</code></pre>"},{"location":"xs/arrays/#21-array-id","title":"2.1. Array ID","text":"<p>This is the ID of the array you want to access. It is returned by the <code>xsArrayCreate</code> functions.</p>"},{"location":"xs/arrays/#22-array-index","title":"2.2. Array index","text":"<p>This is the index of the element you want to access. The first element of an array has index 0, the second element has index 1, and so on. If the index is out of bounds (i.e. less than 0 or greater than or equal to the array size), the function will return the default value of the array.</p>"},{"location":"xs/arrays/#3-assigning-values-to-array-elements","title":"3. Assigning values to array elements","text":"<p>To assign a value to an element of an array, you need to use one of the following functions (depending on the data type the array stores):</p> <p>Signatures of <code>xsArraySet</code> functions</p> <pre><code>// Sets the value at the specified index in the requested array.\nvoid xsArraySetBool(int arrayID = -1, int index = -1, bool value = false);\nvoid xsArraySetInt(int arrayID = -1, int index = -1, int value = -1);\nvoid xsArraySetFloat(int arrayID = -1, int index = -1, float value = -1.0);\nvoid xsArraySetString(int arrayID = -1, int index = -1, string value = \"\");\nvoid xsArraySetVector(int arrayID = -1, int index = -1, vector value = cInvalidVector);\n</code></pre>"},{"location":"xs/arrays/#31-array-id","title":"3.1. Array ID","text":"<p>This is the ID of the array you want to access. It is returned by the <code>xsArrayCreate</code> functions.</p>"},{"location":"xs/arrays/#32-array-index","title":"3.2. Array index","text":"<p>This is the index of the element you want to access. The first element of an array has index 0, the second element has index 1, and so on. If the index is out of bounds (i.e. less than 0 or greater than or equal to the array size), the function will do nothing.</p>"},{"location":"xs/arrays/#33-value","title":"3.3. Value","text":"<p>This is the value you want to assign to the element. It must be of the same data type as the array.</p>"},{"location":"xs/arrays/#4-resizing-arrays","title":"4. Resizing arrays","text":"<p>To resize an array, you need to use one of the following functions (depending on the data type the array stores):</p> <p>Signatures of <code>xsArrayResize</code> functions</p> <pre><code>// Resize the requested array.\nbool xsArrayResizeBool(int arrayID = -1, int newSize = -1);\nbool xsArrayResizeInt(int arrayID = -1, int newSize = -1);\nbool xsArrayResizeFloat(int arrayID = -1, int newSize = -1);\nbool xsArrayResizeString(int arrayID = -1, int newSize = -1);\nbool xsArrayResizeVector(int arrayID = -1, int newSize = -1);\n</code></pre>"},{"location":"xs/arrays/#41-array-id","title":"4.1. Array ID","text":"<p>This is the ID of the array you want to resize. It is returned by the <code>xsArrayCreate</code> functions.</p>"},{"location":"xs/arrays/#42-new-size","title":"4.2. New size","text":"<p>This is the new size of the array. If it's less than the current size, the array will be truncated. If it's greater than the current size, the array will be extended, and the new elements will be initialized to the default value of the array. If it's negative, the function will do nothing and the array will remain unchanged.</p>"},{"location":"xs/arrays/#5-examples","title":"5. Examples","text":"<p>Example of array usage</p> Age3AI.xs<pre><code>void main(void)\n{\n    int lowTierInfantry = xsArrayCreateInt(2, -1, \"List of low-tier infantry units\");\n    xsArraySetInt(lowTierInfantry, 0, cUnitTypePikeman);\n    xsArraySetInt(lowTierInfantry, 1, cUnitTypeCrossbowman);\n\n    int highTierInfantry = xsArrayCreateInt(2, -1, \"List of high-tier infantry units\");\n    xsArraySetInt(highTierInfantry, 0, cUnitTypeHalberdier);\n    xsArraySetInt(highTierInfantry, 1, cUnitTypeSkirmisher);\n\n    for (int i = 0; i &lt; xsArrayGetSize(lowTierInfantry); i++)\n    {\n        int unitType = xsArrayGetInt(lowTierInfantry, i);\n        string unitName = kbGetUnitTypeName(unitType);\n        aiEcho(\"Low-tier infantry unit at index \" + i + \": \" + unitName);\n    }\n\n    for (int i = 0; i &lt; xsArrayGetSize(highTierInfantry); i++)\n    {\n        int unitType = xsArrayGetInt(highTierInfantry, i);\n        string unitName = kbGetUnitTypeName(unitType);\n        aiEcho(\"High-tier infantry unit at index \" + i + \": \" + unitName);\n    }\n}\n</code></pre>"},{"location":"xs/comments/","title":"Comments","text":"<p>Comments are a part of a script that the game ignores. Comments are used to add short notes, reminders or a detailed documentation in a script. They can also be used to temporarily disable certain parts of the code.</p> <p>There are two types of comments:</p> <ul> <li>Inline comments.</li> <li>Block comments.</li> </ul>"},{"location":"xs/comments/#1-inline-comments","title":"1. Inline comments","text":"<p>Inline comments begin with two forward slashes <code>//</code> and span a single line.</p> <p>Some examples of inline comments</p> constants.xs<pre><code>// This is the number PI.\nconst float PI = 3.141592;\n// Degrees to radians conversion factor.\nconst float cDegToRad = PI / 180.0;\n// Radians to degrees conversion factor.\nconst float cRadToDeg = 180.0 / PI;\n</code></pre>"},{"location":"xs/comments/#2-block-comments","title":"2. Block comments","text":"<p>Block comments begin with a forward slash followed by an asterisk <code>/*</code>, and end with an asterisk followed by a forward slash <code>*/</code>. They can span multiple lines.</p> <p>Some examples of block comments</p> main.xs<pre><code>/*\n  This is the \"main\" function of the script, also known as the \"entry point\".\n  It is called when the map is fully loaded and before the first frame is\n  rendered. Certain things, mostly initialization, should be done here.\n*/\nvoid main(void)\n{\n  /*\n    Tell the system to divide the map into areas and area groups.\n    This must be done, only once, and as early as possible.\n  */\n  kbAreaCalculate();\n\n  /*\n    Set the seed for the random number generator. -1 means a random seed.\n    Use a specific seed to reproduce the same sequence of random numbers,\n    which is useful for debugging.\n  */\n  aiRandSetSeed(-1);\n}\n</code></pre> <p>Do not nest block comments</p> <p>Block comments cannot be nested.</p> <pre><code>/*\n  If you look closely at the colors, you will notice\n  /*\n    that this comment is grey-colored because\n    it is still inside the block comment.\n  */\n  Here, however, the comment is no longer grey-colored\n  because it is outside the block comment. Avoid nesting\n  block comments!\n*/\n</code></pre>"},{"location":"xs/conditionals/","title":"Conditionals","text":"<p>Conditionals are used when you want to execute a block of code only if a certain condition is met.</p>"},{"location":"xs/conditionals/#1-if-statement","title":"1. <code>if</code> statement","text":"<p>The <code>if</code> statement is used to execute a block of code only if a certain condition is met.</p> <p>Syntax of an <code>if</code> statement</p> <pre><code>if (condition)\n{\n    // code to execute if condition is true\n}\n</code></pre>"},{"location":"xs/conditionals/#11-example","title":"1.1. Example","text":"<p>Example of an <code>if</code> statement</p> Age3AI.xs<pre><code>void main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Generate a random number between 0 and 9\n    int randomNumber = aiRandInt(10);\n\n    // Say hello only if the random number is less than 7\n    if (randomNumber &lt; 7)\n    {\n        aiEcho(\"Hello!\");\n    }\n}\n</code></pre> <p>You can keep restarting the scenario to see the different outcomes.</p> <p>If the AI Debug Output does not print anything, it means that the random number was greater than or equal to 7. Otherwise you should see the following output:</p> AI Debug Output<pre><code>00:00:00 (0): P#1 (Player 1) Hello!\n</code></pre>"},{"location":"xs/conditionals/#2-if-else-statement","title":"2. <code>if-else</code> statement","text":"<p>The <code>if-else</code> statement is used to execute a block of code if a condition is met, and another block of code if the condition is not met.</p> <p>Syntax of an <code>if-else</code> statement</p> <pre><code>if (condition)\n{\n    // code to execute if condition is true\n}\nelse\n{\n    // code to execute if condition is false\n}\n</code></pre>"},{"location":"xs/conditionals/#21-example","title":"2.1. Example","text":"<p>Example of an <code>if-else</code> statement</p> Age3AI.xs<pre><code>void main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Generate a random number between 0 and 9\n    int randomNumber = aiRandInt(10);\n\n    if (randomNumber &lt; 5)\n    {\n        aiEcho(\"The random number is less than 5 (it is \" + randomNumber + \")\");\n    }\n    else\n    {\n        aiEcho(\"The random number is greater than or equal to 5 (it is \" + randomNumber + \")\");\n    }\n}\n</code></pre>"},{"location":"xs/conditionals/#3-if-else-if-else-statement","title":"3. <code>if-else if-else</code> statement","text":"<p>It is possible to chain multiple <code>if-else</code> statements together to execute different blocks of code depending on the value of a variable.</p> <p>Syntax of an <code>if-else if-else</code> statement</p> <pre><code>if (condition1)\n{\n    // code to execute if condition1 is true\n}\nelse if (condition2)\n{\n    // code to execute if condition1 is false and condition2 is true\n}\n// (you can add as many \"else if\" statements as you want)\nelse\n{\n    // code to execute if all conditions are false\n}\n</code></pre>"},{"location":"xs/functions/","title":"Functions","text":"<p>Functions are used to group together multiple statements into a single block of code that can be executed multiple times. The use of functions helps to reduce code duplication and makes the code easier to read and maintain.</p>"},{"location":"xs/functions/#1-definition","title":"1. Definition","text":"<p>Defining a function means creating a new function by giving it a name, a return type, a list of parameters and a body. Functions must be defined before they can be used.</p> <p>Syntax of function definition</p> <pre><code>returnType name(parameters)\n{\n    // body\n    return(returnValue);\n}\n</code></pre>"},{"location":"xs/functions/#11-return-type","title":"1.1. Return type","text":"<p>This can be any of the data types listed in the section about variables. This determines what kind of data the function will return, e.g. a function with return type <code>int</code> cannot return a string. If the function does not return anything, the return type should be <code>void</code>.</p>"},{"location":"xs/functions/#12-name","title":"1.2. Name","text":"<p>Function names follow the same rules as variable names:</p> <ul> <li>Names are case-sensitive, e.g. <code>foo</code> and <code>Foo</code> are two different names.</li> <li>Names can only contain letters, numbers and underscores. Diacritics are not   allowed.</li> <li>Names must start with a letter or an underscore.</li> <li>Names cannot be the same as a keyword.</li> <li>Functions cannot have the same name as a variable, constant,   rule, rule group or another function.</li> </ul>"},{"location":"xs/functions/#13-parameters","title":"1.3. Parameters","text":"<p>Parameters are used to pass data to the function. They have the same syntax as variable definitions without the semicolon at the end. Multiple parameters are separated by commas.</p>"},{"location":"xs/functions/#14-body","title":"1.4. Body","text":"<p>The body of the function is a block of code that will be executed when the function is called. It can contain any number of statements. However, there are some restrictions:</p> <ul> <li>You cannot define a function inside another function.</li> <li>You cannot define a rule inside a function.</li> </ul>"},{"location":"xs/functions/#15-return-value","title":"1.5. Return value","text":"<p>The return value is the data that the function will return. It must be of the same type as the function's return type. If the function does not return anything, the return value should be omitted.</p>"},{"location":"xs/functions/#16-examples","title":"1.6. Examples","text":"<p>Examples of function definition</p> Age3AI.xs<pre><code>int factorial(int n = 0)\n{\n    // Factorial of 0 is 1.\n    if (n == 0)\n    {\n        return(1);\n    }\n\n    // Calculate the factorial.\n    int result = 1;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        result *= i;\n    }\n\n    return(result);\n}\n</code></pre>"},{"location":"xs/functions/#2-calling","title":"2. Calling","text":"<p>Calling a function means executing the code inside the function's body. This is done by using the function's name followed by a list of arguments in parentheses.</p> <p>Syntax of function call</p> <pre><code>name(arguments);\n</code></pre>"},{"location":"xs/functions/#21-arguments","title":"2.1. Arguments","text":"<p>The arguments are the data that will be passed to the function. They must be of the same type as the function's parameters. Multiple arguments are separated by commas.</p>"},{"location":"xs/functions/#22-examples","title":"2.2. Examples","text":"<p>Some examples of function calls</p> Age3AI.xs<pre><code>// (see the definition of the factorial function above)\n\nvoid main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Generate some random numbers and print their factorials.\n    for (int i = 0; i &lt; 10; i++)\n    {\n        int n = aiRandInt(0, 10);\n        int f = factorial(n);\n        aiEcho(\"Factorial of \" + n + \" is \" + f);\n    }\n}\n</code></pre> <p>Where is the definition of the <code>aiEcho</code> function?</p> <p><code>aiEcho</code> is a built-in function, which means that it is defined in the game engine.</p>"},{"location":"xs/good-practices/","title":"Good Practices","text":"<p>To make it easier to maintain your code and collaborate on your scripts, you are highly recommended to adhere to the following guidelines.</p>"},{"location":"xs/good-practices/#1-indentation-and-formatting","title":"1. Indentation and formatting","text":"<p>In a script, a whitespace is one or more spaces, tabs or newlines, or any combination of these. Whitespace is used to separate tokens (keywords, operators and identifiers, i.e. variable names, function names, etc.) from each other.</p> <p>The game only needs one space between tokens (or no whitespace at all in some cases). Which means that you can write your code like this:</p> <p>Bad code formatting</p> Age3AI.xs<pre><code>void main(void) { aiEcho(\"Hello, world!\"); }\n</code></pre> <p>However, this is not very readable. To make your code more readable, you should use indentation and line breaks to separate statements and blocks of code.</p> <p>Good code formatting</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"Hello, world!\");\n}\n</code></pre> <p>Indentation is the process of adding whitespace at the beginning of a line to make it stand out from the rest of the code. In the example above, the line <code>aiEcho(\"Hello, world!\");</code> is indented with four spaces.</p> <p>In general, you indent the code each time you open a new block of code (like an <code>if</code> statement or a function body). You can use tabs or spaces for indentation, but you should be consistent and use the same style throughout your script.</p> <p>Another example</p> <p>Here, the <code>if</code> statement opens a new block of code, so the code inside is indented. Same for <code>else</code>.</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiRandSetSeed(-1);\n    if (aiRandInt(100) &lt; 50)\n    {\n        aiEcho(\"Let it begin!\");\n    }\n    else\n    {\n        aiEcho(\"Let's get it on!\");\n    }\n}\n</code></pre>"},{"location":"xs/good-practices/#2-comments","title":"2. Comments","text":"<ul> <li>Comments should be concise and to the point.</li> <li>Don't abuse comments. In general, you should only use comments to explain   complex code or to provide additional information that is not obvious from the   code itself.</li> </ul>"},{"location":"xs/good-practices/#3-naming","title":"3. Naming","text":"<p>As a general rule, you should use descriptive names for your variables, functions, etc. This makes it easier to understand what they do and what they are used for.</p> <p>There are also more specific conventions:</p> <ul> <li>Global variables are usually prefixed   with <code>g</code> (e.g. <code>gForwardBaseID</code>). This is to make it clear that they are   global.</li> <li>Local variables are usually written in   camel case where the first letter   is lowercase (e.g. <code>forwardBaseID</code>).</li> <li>Constants are usually prefixed with <code>c</code> (e.g.   <code>cMaxSettlersPerFarm</code>). This is to make it clear that they are constants.</li> <li>Functions are usually written in camel case where the first   letter is lowercase (e.g. <code>getUnit</code>).</li> <li>Rules are usually written in camel case where the first letter is   uppercase (e.g. <code>ManageGatherers</code>).</li> <li>There is no definitive convention for rule groups.   However, the default AI scripts use camel case where the first letter is   lowercase (e.g. <code>tcComplete</code>).</li> <li>There is no definitive convention for labels either. In fact,   labels are rarely used in AI scripts.</li> </ul> <p>You can make your own naming conventions</p> <p>It is definitely possible that you don't like the conventions described above. You can make your own conventions as long as you are consistent and you document them in your script.</p> This example uses the following conventions: <ul> <li>Global variables are prefixed with <code>g</code> (e.g. <code>gUnitTypeHouse</code>).</li> <li>Local variables are written in snake case (e.g. <code>house_build_plan</code>).</li> <li>Constants are prefixed with <code>c</code> (e.g. <code>cStrategyBoom</code>).</li> <li>Functions are written in camel case with the first letter being lowercase (e.g. <code>getUnit1</code>).</li> <li>Rules are written in camel case with the first letter being uppercase (e.g. <code>MaintainHouses</code>).</li> <li>Rule groups are prefixed with <code>rg</code> (e.g. <code>rgMainBase</code>).</li> </ul>"},{"location":"xs/includes/","title":"Includes","text":"<p>It is possible include the content of a file in another file using the <code>include</code> directive.</p> <p>Syntax of the <code>include</code> directive</p> <pre><code>include \"path/to/file.xs\";\n</code></pre> <p>In a script, the <code>include</code> directive is replaced by the content of the corresponding file.</p> <p>Example of file inclusion</p> <p>Let's say <code>foo.xs</code> contains the following code and is placed in the same folder as <code>Age3AI.xs</code>:</p> foo.xs<pre><code>void foo(void)\n{\n    aiEcho(\"Hello from foo!\");\n}\n</code></pre> <p>We can include it like this:</p> Age3AI.xs<pre><code>include \"./foo.xs\";\n\nvoid main(void)\n{\n    foo();\n}\n</code></pre> <p>Which will ultimately look like this once the game is done putting files together:</p> Age3AI.xs<pre><code>void foo(void)\n{\n    aiEcho(\"Hello from foo!\");\n}\n\nvoid main(void)\n{\n    foo();\n}\n</code></pre> <p>Absolute and relative paths are both supported.</p> <p>Absolute paths start at the AI Root Folder.</p>"},{"location":"xs/labels/","title":"Labels","text":"<p>Labels are used to jump to a specific point in the script. They are defined by the <code>label</code> keyword followed by the label name and a semicolon. Labels can be used with the <code>goto</code> keyword to jump to the label.</p> <p>Label names follow the same rules as variable names:</p> <ul> <li>Names are case-sensitive, e.g. <code>foo</code> and <code>Foo</code> are two different names.</li> <li>Names can only contain letters, numbers and underscores. Diacritics are not   allowed.</li> <li>Names must start with a letter or an underscore.</li> <li>Names cannot be the same as a keyword.</li> <li>Labels cannot have the same name as a variable, constant,   function, rule or rule group.</li> </ul> <p>Syntax of labels</p> <pre><code>// Creating a label.\nlabel labelName;\n\n// Jumping to a label.\ngoto labelName;\n</code></pre> <p>Example of a label</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"Hello from above the label!\");\n    goto _SayGoodbye;\n    aiEcho(\"Hello from a part of the code that won't be reached!\");\n    label _SayGoodbye;\n    aiEcho(\"Hello from below the label! Goodbye!\");\n}\n</code></pre> AI Debug Output<pre><code>00:00:00 (0): P#1 (Player 1) Hello from above the label!\n00:00:00 (0): P#1 (Player 1) Hello from below the label! Goodbye!\n</code></pre> <p>Duplicate labels</p> <p>The game does not prevent you from creating multiple labels with the same name. It's not fully clear what happens when you do this, but it's best to avoid it.</p>"},{"location":"xs/loops/","title":"Loops","text":"<p>Loops are used when you want to repeat a block of code multiple times. There are two types of loops in XS: <code>while</code> loops and <code>for</code> loops.</p>"},{"location":"xs/loops/#1-while-loops","title":"1. <code>while</code> loops","text":"<p>The <code>while</code> loop is used to execute a block of code while a condition is met. The condition is checked at the beginning of each iteration of the loop.</p> <p>Syntax of a <code>while</code> loop</p> <pre><code>while (condition)\n{\n    // code to execute while condition is true\n}\n</code></pre>"},{"location":"xs/loops/#11-example","title":"1.1. Example","text":"<p>Example of a <code>while</code> loop</p> Age3AI.xs<pre><code>void main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Keep generating random numbers until we get one that is less than 2\n    int numAttempts = 0;\n    while(aiRandInt(10) &gt;= 2)\n    {\n        numAttempts++;\n        aiEcho(\"The generated number is greater than or equal to 2 (attempt #\" + numAttempts + \"). Trying again...\");\n    }\n\n    aiEcho(\"\" + numAttempts + \" random numbers were generated before we got one that was less than 2.\");\n}\n</code></pre>"},{"location":"xs/loops/#2-for-loops","title":"2. <code>for</code> loops","text":"<p>The <code>for</code> loop is primarily used to execute a block of code a certain number of times. For that, it uses a counter variable that is incremented or decremented at the end of each iteration of the loop.</p> <p>Syntax of a <code>for</code> loop</p> <pre><code>for (initialization; condition; increment)\n{\n    // code to execute while condition is true\n}\n</code></pre>"},{"location":"xs/loops/#21-initialization","title":"2.1. Initialization","text":"<p>This is where you initialize the counter variable. It is only executed once, before the first iteration of the loop.</p>"},{"location":"xs/loops/#22-condition","title":"2.2. Condition","text":"<p>This is where you specify the condition that must be met for the loop to proceed. It is checked at the beginning of each iteration of the loop. Once the condition is no longer met, the loop stops.</p>"},{"location":"xs/loops/#23-increment","title":"2.3. Increment","text":"<p>This is where you specify how the counter variable should be incremented or decremented at the end of each iteration of the loop.</p>"},{"location":"xs/loops/#24-example","title":"2.4. Example","text":"<p>Example of a <code>for</code> loop</p> Age3AI.xs<pre><code>void main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Generate 10 random numbers and print them to the console\n    for (int i = 0; i &lt; 10; i++)\n    {\n        aiEcho(\"Random number #\" + (i + 1) + \": \" + aiRandInt(10));\n    }\n}\n</code></pre>"},{"location":"xs/loops/#3-break-statement","title":"3. <code>break</code> statement","text":"<p>The <code>break</code> statement is used to exit a loop even if the condition is still met.</p> <p>Example of a <code>break</code> statement</p> Age3AI.xs<pre><code>void main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Keep generating random numbers until we get one that is less than 2\n    int numAttempts = 0;\n    while(true)\n    {\n        numAttempts++;\n        int randNum = aiRandInt(10);\n        aiEcho(\"The generated number is \" + randNum + \" (attempt #\" + numAttempts + \").\");\n\n        if (randNum &lt; 2)\n        {\n            break;\n        }\n    }\n\n    aiEcho(\"\" + numAttempts + \" random numbers were generated before we got one that was less than 2.\");\n}\n</code></pre>"},{"location":"xs/loops/#4-continue-statement","title":"4. <code>continue</code> statement","text":"<p>The <code>continue</code> statement is used to skip the rest of the code in the current iteration of the loop and proceed to the next iteration.</p> <p>Example of a <code>continue</code> statement</p> Age3AI.xs<pre><code>void main(void)\n{\n    // Set the seed of the random number generator.\n    aiRandSetSeed(-1);\n\n    // Generate 10 random numbers and print them to the console\n    for (int i = 0; i &lt; 10; i++)\n    {\n        int randNum = aiRandInt(10);\n\n        if (randNum &lt; 2)\n        {\n            aiEcho(\"Skipping random number #\" + (i + 1) + \" because it is less than 2.\");\n            continue;\n        }\n\n        aiEcho(\"Random number #\" + (i + 1) + \": \" + randNum);\n    }\n}\n</code></pre>"},{"location":"xs/operators/","title":"Operators","text":"<p>Operators are used to perform operations on variables and constants. This section talks about the most frequently used operators in XS.</p>"},{"location":"xs/operators/#1-arithmetic-operators","title":"1. Arithmetic operators","text":"Operator Expression Description Example Result <code>+</code> <code>a + b</code> Adds <code>a</code> and <code>b</code>. <code>2 + 3</code> <code>5</code> <code>-</code> <code>a - b</code> Subtracts <code>b</code> from <code>a</code>. <code>5 - 3</code> <code>2</code> <code>*</code> <code>a * b</code> Multiplies <code>a</code> by <code>b</code>. <code>2 * 3</code> <code>6</code> <code>/</code> <code>a / b</code> Divides <code>a</code> by <code>b</code>. <code>6 / 2</code> <code>3</code> <code>%</code> <code>a % b</code> Calculates the remainder of <code>a</code> divided by <code>b</code>. <code>5 % 2</code> <code>1</code>"},{"location":"xs/operators/#2-comparison-operators","title":"2. Comparison operators","text":"Operator Expression Description Example Result <code>==</code> <code>a == b</code> Checks if <code>a</code> is equal to <code>b</code>. <code>2 == 3</code> <code>false</code> <code>!=</code> <code>a != b</code> Checks if <code>a</code> is not equal to <code>b</code>. <code>2 != 3</code> <code>true</code> <code>&lt;</code> <code>a &lt; b</code> Checks if <code>a</code> is less than <code>b</code>. <code>2 &lt; 3</code> <code>true</code> <code>&lt;=</code> <code>a &lt;= b</code> Checks if <code>a</code> is less than or equal to <code>b</code>. <code>2 &lt;= 3</code> <code>true</code> <code>&gt;</code> <code>a &gt; b</code> Checks if <code>a</code> is greater than <code>b</code>. <code>2 &gt; 3</code> <code>false</code> <code>&gt;=</code> <code>a &gt;= b</code> Checks if <code>a</code> is greater than or equal to <code>b</code>. <code>2 &gt;= 3</code> <code>false</code>"},{"location":"xs/operators/#3-logical-operators","title":"3. Logical operators","text":"Operator Expression Description Example Result <code>&amp;&amp;</code> <code>a &amp;&amp; b</code> Checks if <code>a</code> and <code>b</code> are both true. <code>true &amp;&amp; false</code> <code>false</code> || <code>a</code> || <code>b</code> Checks if <code>a</code> or <code>b</code> is true. <code>true</code> || <code>false</code> <code>true</code>"},{"location":"xs/operators/#4-assignment-operators","title":"4. Assignment operators","text":"<p>Assignment operators involve assigning a value to a variable. The variable to which the value is assigned is always on the left side of the operator, and must have been defined before.</p> Operator Expression Description Example Result <code>=</code> <code>a = b</code> Assigns the value of <code>b</code> to <code>a</code>. <code>a = 2</code> The value of <code>a</code> is now <code>2</code> <code>+=</code> <code>a += b</code> Adds <code>b</code> to <code>a</code>, then assigns the result to <code>a</code>. <code>a += 2</code> The value of <code>a</code> has increased by 2 <code>-=</code> <code>a -= b</code> Subtracts <code>b</code> from <code>a</code>, then assigns the result to <code>a</code>. <code>a -= 2</code> The value of <code>a</code> has decreased by 2 <code>*=</code> <code>a *= b</code> Multiplies <code>a</code> by <code>b</code>, then assigns the result to <code>a</code>. <code>a *= 2</code> The value of <code>a</code> has doubled <code>/=</code> <code>a /= b</code> Divides <code>a</code> by <code>b</code>, then assigns the result to <code>a</code>. <code>a /= 2</code> The value of <code>a</code> has halved <code>%=</code> <code>a %= b</code> Calculates the remainder of <code>a</code> divided by <code>b</code>, then assigns the result to <code>a</code>. <code>a %= 2</code> The value of <code>a</code> has changed"},{"location":"xs/operators/#5-increment-and-decrement-operators","title":"5. Increment and decrement operators","text":"<p>Increment and decrement operators are used to increase or decrease the value of a variable by 1.</p> Operator Expression Description Example Result <code>++</code> <code>a++</code> Increases the value of <code>a</code> by 1, then assigns the result to <code>a</code>. <code>a++</code> The value of <code>a</code> has increased by 1 <code>--</code> <code>a--</code> Decreases the value of <code>a</code> by 1, then assigns the result to <code>a</code>. <code>a--</code> The value of <code>a</code> has decreased by 1"},{"location":"xs/operators/#6-concatenation-operator","title":"6. Concatenation operator","text":"<p>The concatenation operator is used to combine two strings into one. It is represented by the <code>+</code> symbol. For example, <code>\"Hello\" + \" \" + \"world\"</code> will result in the string <code>\"Hello world\"</code>.</p> <p>It is also possible to concatenate a string with any other data type. For that, the quotation marks are not used. For example, <code>\"Hello \" + 2</code> will result in the string <code>\"Hello 2\"</code>.</p>"},{"location":"xs/operators/#7-ternary-operator","title":"7. Ternary operator","text":"<p>The ternary operator is a special operator that takes three operands. It is used to shorten an <code>if</code> statement.</p> <p>Syntax of the ternary operator</p> <pre><code>condition ? expression1 : expression2\n</code></pre> <p>The ternary operator evaluates <code>condition</code>. If it is true, it evaluates <code>expression1</code> and returns its value. Otherwise, it evaluates <code>expression2</code> and returns its value.</p> <p>Some examples of the ternary operator</p> <pre><code>// (assuming that all variables have been defined.)\n\n// Use all settlers to gather wood if we need a town center asap and we\n// don't have enough wood, otherwise use the default distribution.\nint numWoodGatherers = numTCs == 0 &amp;&amp; woodAmount &lt; 600 ? numSettlers : numSettlers * woodGathererPercentage;\n</code></pre>"},{"location":"xs/operators/#8-operator-precedence","title":"8. Operator precedence","text":"<p>Operator precedence determines the order in which operators are evaluated. For example, in the expression <code>2 + 3 * 4</code>, the multiplication is evaluated first, then the addition. This is because the multiplication operator has a higher precedence than the addition operator.</p> <p>Operators with a higher precedence are evaluated before operators with a lower precedence.</p> Precedence Operator(s) 1 <code>++</code>, <code>--</code> 2 <code>*</code>, <code>/</code>, <code>%</code> 3 <code>+</code>, <code>-</code> 4 <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code> 5 <code>==</code>, <code>!=</code> 6 <code>&amp;&amp;</code> 7 || 8 <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> 9 <code>? :</code>"},{"location":"xs/operators/#9-using-parentheses","title":"9. Using parentheses","text":"<p>Parentheses can be used to override the default precedence of operators. For example, in the expression <code>2 + 3 * 4</code>, the multiplication is evaluated first, then the addition. However, if you want the addition to be evaluated first, you can use parentheses: <code>(2 + 3) * 4</code>.</p> <p>Parentheses can be nested, and the expression inside the innermost pair of parentheses is evaluated first.</p>"},{"location":"xs/rules/","title":"Rules","text":"<p>Rules are blocks of code that are periodically executed at a certain interval. All of the concrete things the AI does, such as scouting, gathering, attacking, etc. happen in rules.</p>"},{"location":"xs/rules/#1-definition","title":"1. Definition","text":"<p>Defining a rule means creating a new rule by giving it a name and a body. Rules must be defined before they can be used.</p> <p>Syntax of rule definition</p> <pre><code>rule ruleName\ngroup groupName\nactive/inactive\nminInterval intervalValue\nmaxInterval intervalValue\nhighFrequency\nrunImmediately\npriority priorityValue\n{\n    // body\n}\n</code></pre>"},{"location":"xs/rules/#11-rule-name","title":"1.1. Rule name","text":"<p>Rule names follow the same rules as variable names.</p> <ul> <li>Names are case-sensitive, e.g. <code>foo</code> and <code>Foo</code> are two different names.</li> <li>Names can only contain letters, numbers and underscores. Diacritics are not   allowed.</li> <li>Names must start with a letter or an underscore.</li> <li>Names cannot be the same as a keyword.</li> <li>Rules cannot have the same name as a variable, constant,   function, rule group or another   rule.</li> </ul>"},{"location":"xs/rules/#12-group-name","title":"1.2. Group name","text":"<p>See rule groups.</p> <p>This can be omitted if the rule is not part of a group.</p>"},{"location":"xs/rules/#13-activeinactive","title":"1.3. Active/Inactive","text":"<p>This is the initial state of the rule.</p> <ul> <li><code>active</code> means the rule is enabled by default, and will run as soon as its   first interval is reached.</li> <li><code>inactive</code> means the rule is disabled by default, and will not run until it   is enabled.</li> </ul> <p>If this omitted, the rule will be <code>active</code> by default.</p>"},{"location":"xs/rules/#14-minmax-interval","title":"1.4. Min/Max interval","text":"<p>These are the minimum and maximum intervals between two consecutive executions of the rule. The interval is measured in seconds.</p> <ul> <li><code>minInterval</code> is the minimum interval that must pass before the rule can be   executed again.</li> <li><code>maxInterval</code> is the maximum interval that can pass before the rule must be   executed again.</li> </ul> <p><code>minInterval</code> is, by far, more frequently used than <code>maxInterval</code></p> <p><code>minInterval</code> and <code>maxInterval</code> cannot be used with <code>highFrequency</code>.</p>"},{"location":"xs/rules/#15-high-frequency","title":"1.5. High frequency","text":"<p>When this keyword is present, the rule will be executed 60 times per physical second, i.e. independent of the game speed.</p> <p><code>highFrequency</code> cannot be used with <code>minInterval</code> or <code>maxInterval</code>.</p>"},{"location":"xs/rules/#16-run-immediately","title":"1.6. Run immediately","text":"<p>By default, when rules are enabled, they will wait for their first interval to pass before running. This keyword can be used to make the rule run immediately after it is enabled.</p>"},{"location":"xs/rules/#17-priority","title":"1.7. Priority","text":"<p>Rules are executed in order of priority. The higher the priority, the sooner the rule will be executed.</p> <p>This can be omitted to let the game decide the priority of the rule.</p>"},{"location":"xs/rules/#18-body","title":"1.8. Body","text":"<p>This can be any valid code except for a function definition or another rule definition.</p>"},{"location":"xs/rules/#19-examples","title":"1.9. Examples","text":"<p>Example of a rule definition</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"It has begun!\");\n}\n\nrule TimeElapsed\nactive\nminInterval 5\nrunImmediately\n{\n    int timeElapsed = xsGetTime() / 1000;\n    aiEcho(\"\" + timeElapsed + \" seconds have passed since the game started.\");\n}\n</code></pre>"},{"location":"xs/rules/#2-enabling-rules","title":"2. Enabling rules","text":"<p>Rules can be enabled with the <code>xsEnableRule</code> function.</p> <p>Signature of <code>xsEnableRule</code></p> <pre><code>// Enables the rule with the given name.\nvoid xsEnableRule(string ruleName = \"\");\n</code></pre> <p>Using <code>xsEnableRule</code> to enable a rule</p> <p>This is the same example as above, but now the rule is disabled by default and we enable it manually.</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"It has begun!\");\n    xsEnableRule(\"TimeElapsed\");\n}\n\nrule TimeElapsed\ninactive\nminInterval 5\nrunImmediately\n{\n    int timeElapsed = xsGetTime() / 1000;\n    aiEcho(\"\" + timeElapsed + \" seconds have passed since the game started.\");\n}\n</code></pre>"},{"location":"xs/rules/#3-disabling-rules","title":"3. Disabling rules","text":"<p>Rules can be disabled with the <code>xsDisableRule</code> function. Rules can also disable themselves with the <code>xsDisableSelf</code> function.</p> <p><code>xsDisableSelf</code> and <code>xsDisableRule</code> signatures</p> <pre><code>// Disables the rule in which it is called.\nvoid xsDisableSelf(void);\n// Disables the rule with the given name.\nvoid xsDisableRule(string ruleName = \"\");\n</code></pre> <p>Disabling a rule</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"It has begun!\");\n}\n\nrule ManageCommunication\nactive\nminInterval 1\nrunImmediately\n{\n    // Say hello in the beginning.\n    if (xsGetTime() &lt; 1000)\n    {\n        xsEnableRule(\"SayHello\");\n    }\n\n    // Say goodbye after 10 seconds and disable this rule.\n    if (xsGetTime() &gt;= 10000)\n    {\n        xsEnableRule(\"SayGoodbye\");\n        xsDisableSelf();\n    }\n}\n\nrule SayHello\ninactive\nrunImmediately\n{\n    aiEcho(\"Hello!\");\n    xsDisableSelf();\n}\n\nrule SayGoodbye\ninactive\nrunImmediately\n{\n    aiEcho(\"Goodbye!\");\n    xsDisableSelf();\n}\n</code></pre>"},{"location":"xs/rules/#4-rule-groups","title":"4. Rule groups","text":"<p>Rules can be grouped together. This is useful for enabling/disabling a group of rules at once.</p> <p>To create a group, use the <code>group</code> keyword in the rule definition, followed by the name of the group. Group names follow the same rules as variable names.</p> <ul> <li>Names are case-sensitive, e.g. <code>foo</code> and <code>Foo</code> are two different names.</li> <li>Names can only contain letters, numbers and underscores. Diacritics are not   allowed.</li> <li>Names must start with a letter or an underscore.</li> <li>Names cannot be the same as a keyword.</li> <li>Rule groups cannot have the same name as a variable, constant,   function or rule.</li> </ul> <p>All rules that have the same group name will be part of the same group.</p> <p>Example of a rule group</p> Age3AI.xs<pre><code>void main(void)\n{\n    aiEcho(\"It has begun!\");\n    xsEnableRuleGroup(\"rgCommunication\");\n}\n\n// Say hello in the beginning.\nrule SayHello\ngroup rgCommunication\ninactive\nrunImmediately\n{\n    aiEcho(\"Hello!\");\n    xsDisableSelf();\n}\n\n// Say goodbye after 10 seconds.\nrule SayGoodbye\ngroup rgCommunication\ninactive\nminInterval 10\n{\n    aiEcho(\"Goodbye!\");\n    xsDisableSelf();\n}\n</code></pre>"},{"location":"xs/rules/#5-calling-rules","title":"5. Calling rules","text":"<p>Rules can be called like a function. This is useful when you want to execute a rule immediately at a specific point in the code and without any interval.</p> <p>For that, the rule needs to be define before it is called, i.e. written anywhere above the call.</p> <p>Calling a rule</p> Age3AI.xs<pre><code>rule SayHello\ninactive\n{\n    aiEcho(\"Hello!\");\n    xsDisableSelf();\n}\n\nvoid main(void)\n{\n    aiEcho(\"It has begun!\");\n    SayHello();\n}\n</code></pre>"},{"location":"xs/strings/","title":"Strings","text":"<p>Strings represent text. Most of the time, they are used for debugging purposes.</p>"},{"location":"xs/strings/#1-creating-a-string","title":"1. Creating a string","text":"<p>Strings are created by enclosing text in double quotes:</p> <p>Example of a string</p> <pre><code>\"Hey there, partner.\"\n</code></pre>"},{"location":"xs/strings/#2-string-concatenation","title":"2. String concatenation","text":""},{"location":"xs/strings/#21-concatenating-two-strings","title":"2.1. Concatenating two strings","text":"<p>Strings can be concatenated using the <code>+</code> operator:</p> <p>Example of string concatenation</p> <pre><code>\"Hello\" + \" \" + \"world!\" // \"Hello world!\"\n</code></pre>"},{"location":"xs/strings/#22-concatenating-a-string-and-another-value","title":"2.2. Concatenating a string and another value","text":"<p>A string can be concatenated with a value of any type. The value will be converted to a string.</p> <p>Example of string concatenation with another value</p> <pre><code>\"I found \" + 3 + \" apples.\" // \"I found 3 apples.\"\n</code></pre> <p>It makes more sense when the value is a variable:</p> <p>Example of string concatenation with a variable</p> Age3AI.xs<pre><code>void main(void)\n{\n    int diceRoll = 1 + aiRandInt(6); // 1-6\n    aiEcho(\"You rolled a \" + diceRoll + \".\");\n}\n</code></pre>"},{"location":"xs/strings/#3-escape-sequences","title":"3. Escape sequences","text":"<p>Certain characters cannot be used directly in a string. For example, since the double quote character is used to delimit strings, it cannot be used directly inside a string. To use such characters, you must use an escape sequence.</p> <p>An escape sequence is a backslash (<code>\\</code>) followed by a character. The backslash tells the game that the character that follows is special and should be treated differently.</p> <p>Here's a list of the most frequently used escape sequences:</p> Escape sequence Character Example Result <code>\\n</code> Newline <code>\"Hello\\nworld!\"</code> <code>Hello</code><code>world!</code> <code>\\t</code> Tab <code>\"Hello\\tworld!\"</code> Cannot be shown in this table <code>\\\"</code> Double quote <code>\"Hello \\\"world\\\"!\"</code> <code>Hello \"world\"!</code> <code>\\\\</code> Backslash <code>\"Hello \\\\world!\"</code> <code>Hello \\world!</code>"},{"location":"xs/variables-scope/","title":"Variables Scope","text":"<p>This section needs improvements.</p> <p>Certain parts of this section are poorly worded, poorly illustrated and might be confusing. Those will be updated at some point.</p> <p>Variable scope refers to the region of script from where a variable can be accessed. There are a few different scopes in XS:</p> <ul> <li>File scope.</li> <li>Global scope.</li> <li>Local scope.</li> </ul>"},{"location":"xs/variables-scope/#1-file-scope","title":"1. File Scope","text":"<p>Variables defined in a file, outside of any function or rule, are file scoped. They can be accessed from any function or rule in the same file, provided that such function or rule is defined after the variable's definition. They cannot be accessed from any other file.</p> <p>File scoped variables.</p> Structure of the AI folder<pre><code>\u251c\u2500\u2500 Age3AI.xs\n\u251c\u2500\u2500 file-scope-test.xs\n</code></pre> file-scope-test.xs<pre><code>int foo = 0;\n\nvoid scopeTest(void)\n{\n    // foo is accessible here.\n    foo = 10;\n}\n</code></pre> Age3AI.xs<pre><code>include \"./file-scope-test.xs\";\n\nvoid main(void)\n{\n    // foo cannot be accessed here.\n    foo = 20; // This will cause an error.\n}\n</code></pre>"},{"location":"xs/variables-scope/#lifetime","title":"Lifetime","text":"<p>File-scoped variables keep their values between function calls:</p> <p>Lifetime of file-scoped variables.</p> Structure of the AI folder<pre><code>\u251c\u2500\u2500 Age3AI.xs\n\u251c\u2500\u2500 file-scope-test.xs\n</code></pre> file-scope-test.xs<pre><code>// In the beginning, the value of foo is 0.\nint foo = 0;\n\nvoid function1(void)\n{\n    // When this function is called, the value of foo\n    // becomes -1.\n    foo = -1;\n}\n\nvoid function2(void)\n{\n    // When this function is called, the value of foo\n    // becomes 10;\n    foo = 10;\n}\n\nvoid echoFoo(void)\n{\n    aiEcho(\"foo = \" + foo);\n}\n</code></pre> Age3AI.xs<pre><code>include \"./file-scope-test.xs\";\n\nvoid main(void)\n{\n    echoFoo();\n    function1();\n    echoFoo();\n    function2();\n    echoFoo();\n}\n</code></pre>"},{"location":"xs/variables-scope/#2-global-scope","title":"2. Global Scope","text":"<p>Variables defined in a file, outside of any function or rule, and marked with the <code>extern</code> keyword, are global scoped. They can be accessed from any function or rule in any file where the file containing the variable is included, provided that such function or rule is defined after the variable's definition.</p> <p>These variables are commonly referred to as global variables.</p> <p>Global scoped variables.</p> Structure of the AI folder<pre><code>\u251c\u2500\u2500 Age3AI.xs\n\u251c\u2500\u2500 global-scope-test.xs\n</code></pre> global-scope-test.xs<pre><code>extern int foo = 0;\n\nvoid scopeTest(void)\n{\n    // foo is accessible here.\n    foo = 10;\n}\n</code></pre> Age3AI.xs<pre><code>include \"./global-scope-test.xs\";\n\nvoid main(void)\n{\n    // foo is accessible here.\n    foo = 20;\n}\n</code></pre>"},{"location":"xs/variables-scope/#lifetime_1","title":"Lifetime","text":"<p>Like file-scoped variables, global variables also keep their values between function calls.</p>"},{"location":"xs/variables-scope/#3-local-scope","title":"3. Local Scope","text":"<p>Variables defined inside a function are local to that function. They can only be accessed from within that function.</p> <p>These variables are commonly referred to as local variables.</p> <p>There are two types of local variables:</p> <ul> <li>non-<code>static</code> variables</li> <li><code>static</code> variables</li> </ul>"},{"location":"xs/variables-scope/#31-non-static-variables","title":"3.1. Non-<code>static</code> variables","text":"<p>Non-<code>static</code> local variable.</p> Age3AI.xs<pre><code>void scopeTest(void)\n{\n    int foo = 0;\n\n    // foo is accessible here.\n    foo = 10;\n}\n\nvoid main(void)\n{\n    // foo cannot be accessed here.\n    foo = 20; // This will cause an error.\n}\n</code></pre>"},{"location":"xs/variables-scope/#lifetime_2","title":"Lifetime","text":"<p>Non-static variables lose their values between function calls.</p> <p>Lifetime of non-<code>static</code> local variables.</p> Age3AI.xs<pre><code>void lifetimeTest(void)\n{\n    int foo = 0;\n\n    aiEcho(\"foo = \" + foo);\n\n    foo = aiRandInt(10);\n}\n\nvoid main(void)\n{\n    aiRandSetSeed(-1);\n    lifetimeTest();\n    lifetimeTest();\n    lifetimeTest();\n}\n</code></pre>"},{"location":"xs/variables-scope/#32-static-variables","title":"3.2. <code>static</code> variables","text":"<p>These variables are marked with the <code>static</code> keyword. They keep their values between function calls.</p> <p>Lifetime of <code>static</code> local variables.</p> Age3AI.xs<pre><code>void lifetimeTest(void)\n{\n    static int foo = 0;\n\n    aiEcho(\"foo = \" + foo);\n\n    foo = aiRandInt(10);\n}\n\nvoid main(void)\n{\n    aiRandSetSeed(-1);\n    lifetimeTest();\n    lifetimeTest();\n    lifetimeTest();\n}\n</code></pre>"},{"location":"xs/variables/","title":"Variables","text":""},{"location":"xs/variables/#1-data-types","title":"1. Data types","text":"<p>Throughout the execution of a script, a lot of data is being manipulated all the time. This data can be of different types, each serving a different purpose. The following table lists the data types available in XS and their corresponding keywords.</p> Data type Keyword Possible values Example Boolean <code>bool</code> <code>true</code> or <code>false</code> <code>true</code> Integer <code>int</code> Any whole number between <code>-999999999</code> and <code>999999999</code> <code>42</code> Float <code>float</code> Any real number between <code>-999999999.999999</code> and <code>999999999.999999</code> <code>3.141592</code> String <code>string</code> Any sequence of characters enclosed in double quotes <code>\"...\"</code>. See Strings. <code>\"Hey there, partner.\"</code> Vector <code>vector</code> See Vectors. <code>xsVectorSet(0, 0, 0)</code>"},{"location":"xs/variables/#2-variables","title":"2. Variables","text":"<p>Variables are used to store data to be retrieved and manipulated later.</p>"},{"location":"xs/variables/#21-definition","title":"2.1. Definition","text":"<p>Defining a variable means creating a new variable by giving it a name, a type and a value. Variables must be defined before they can be used.</p> <p>Syntax of variable definition</p> <pre><code>type name = value;\n</code></pre>"},{"location":"xs/variables/#211-type","title":"2.1.1. Type","text":"<p>This can be any of the data types listed above. This determines what kind of data the variable can store, e.g. a variable of type <code>int</code> cannot store a string.</p>"},{"location":"xs/variables/#212-name","title":"2.1.2. Name","text":"<p>There are a few rules to follow when naming variables:</p> <ul> <li>Names are case-sensitive, e.g. <code>foo</code> and <code>Foo</code> are two different names.</li> <li>Names can only contain letters, numbers and underscores. Diacritics are not   allowed.</li> <li>Names must start with a letter or an underscore.</li> <li>Names cannot be the same as a keyword.</li> <li>Variables cannot have the same name as a function,   rule or rule group.</li> <li>Variables cannot have the same name as another variable,   constant or label in the same   scope.</li> </ul>"},{"location":"xs/variables/#213-value","title":"2.1.3. Value","text":"<p>This is the data that the variable will store. The value must be of the same type as the variable.</p>"},{"location":"xs/variables/#214-examples","title":"2.1.4. Examples","text":"<p>Some examples of variable definitions</p> <pre><code>// Used to store the number of infantry units.\nint numInfantry = 0;\n\n// Default gatherer distribution.\nfloat foodGathererPercentage = 0.5;\nfloat woodGathererPercentage = 0.3;\nfloat goldGathererPercentage = 0.2;\n\n// Used to store the position of the main base.\nvector mainBaseLocation = xsVectorSet(0, 0, 0);\n\n// Used to determine whether an attack should be launched.\nbool shouldAttack = false;\n</code></pre>"},{"location":"xs/variables/#22-assignment","title":"2.2. Assignment","text":"<p>Assigning a variable means changing the value of an existing variable. The variable must have been defined before it can be assigned.</p> <p>Syntax of variable assignment</p> <pre><code>name = value;\n</code></pre>"},{"location":"xs/variables/#221-examples","title":"2.2.1. Examples","text":"<p>Some examples of variable assignments</p> <pre><code>// ========================================================================\n// Definitions (see the assignments further below).\n// ========================================================================\nint numInfantry = 0;\n\nfloat foodGathererPercentage = 0.5;\nfloat woodGathererPercentage = 0.3;\nfloat goldGathererPercentage = 0.2;\n\nvector mainBaseLocation = xsVectorSet(0, 0, 0);\n\nbool shouldAttack = false;\n\n// ========================================================================\n// Assignments, i.e. we will change the values of the variables we just\n// defined.\n// ========================================================================\n\n// We found 10 infantry units.\nnumInfantry = 10;\n\n// We decided to change the gatherer distribution.\nfoodGathererPercentage = 0.4;\nwoodGathererPercentage = 0.3;\ngoldGathererPercentage = 0.3;\n\n// We found the main base at x=30, y=0, z=30.\nmainBaseLocation = xsVectorSet(30, 0, 30);\n\n// We decided to attack.\nshouldAttack = true;\n</code></pre>"},{"location":"xs/variables/#23-constants","title":"2.3. Constants","text":"<p>Constants are variables whose value cannot be changed after they have been defined. They are defined in the same way as variables, except that the <code>const</code> keyword is written before the type.</p> <p>Syntax of constant definition</p> <pre><code>const type name = value;\n</code></pre>"},{"location":"xs/variables/#231-examples","title":"2.3.1. Examples","text":"<p>Some examples of constant definitions</p> <pre><code>// The number pi is a constant.\nconst float pi = 3.141592;\n\n// The number e is also a constant.\nconst float e = 2.718281;\n\n// The speed of light is a constant.\nconst int c = 299792458;\n</code></pre>"},{"location":"xs/vectors/","title":"Vectors","text":"<p>A vector is a data type that represents a point in space. It is made up of three numbers, which represent the x, y, and z coordinates of the point:</p> <ul> <li><code>x</code> goes from the bottom to the right corner of the map.</li> <li><code>y</code> is the elevation.</li> <li><code>z</code> goes from the bottom to the left corner of the map.</li> </ul> <p>Vectors are usually used to represent a position on the map, but can also be used to represent a direction, and can have other, less common uses.</p>"},{"location":"xs/vectors/#1-creating-a-vector","title":"1. Creating a vector","text":"<p>To create a vector, use the <code>xsVectorSet</code> function. It takes three parameters: the x, y, and z coordinates of the vector.</p> <p>Signature of <code>xsVectorSet</code></p> <pre><code>vector xsVectorSet(float x = 0.0, float y = 0.0, float z = 0.0);\n</code></pre> <p>Creating a vector</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector origin = xsVectorSet(0.0, 0.0, 0.0);\n    aiEcho(\"The origin is at \" + origin);\n}\n</code></pre>"},{"location":"xs/vectors/#2-changing-a-specific-component-of-a-vector","title":"2. Changing a specific component of a vector","text":"<p>To change a specific component of a vector, use <code>xsVectorSetX</code>, <code>xsVectorSetY</code>, or <code>xsVectorSetZ</code>, depending on which component you want to change. They take two parameters: the vector to change, and the new value of the component.</p> <p>Signatures of vector setters</p> <pre><code>// Set the x component of the given vector, returns the new vector.\nvector xsVectorSetX(vector v = cOriginVector, float x = 0.0);\n\n// Set the y component of the given vector, returns the new vector.\nvector xsVectorSetY(vector v = cOriginVector, float y = 0.0);\n\n// Set the z component of the given vector, returns the new vector.\nvector xsVectorSetZ(vector v = cOriginVector, float z = 0.0);\n</code></pre> <p>Changing a specific component of a vector</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector point = cOriginVector;\n    aiEcho(\"The point is at \" + point);\n\n    point = xsVectorSetX(point, 10.0);\n    aiEcho(\"The point is now at \" + point);\n}\n</code></pre>"},{"location":"xs/vectors/#3-getting-a-specific-component-of-a-vector","title":"3. Getting a specific component of a vector","text":"<p>To get a specific component of a vector, use <code>xsVectorGetX</code>, <code>xsVectorGetY</code>, or <code>xsVectorGetZ</code>, depending on which component you want to get. They take one parameter: the vector to get the component from.</p> <p>Signatures of vector getters</p> <pre><code>// Get the x component of the given vector.\nfloat xsVectorGetX(vector v = cOriginVector);\n\n// Get the y component of the given vector.\nfloat xsVectorGetY(vector v = cOriginVector);\n\n// Get the z component of the given vector.\nfloat xsVectorGetZ(vector v = cOriginVector);\n</code></pre> <p>Getting a specific component of a vector</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector point = cOriginVector;\n    aiEcho(\"The point is at \" + point);\n\n    float x = xsVectorGetX(point);\n    aiEcho(\"The x component of the point is \" + x);\n}\n</code></pre>"},{"location":"xs/vectors/#4-vector-operations","title":"4. Vector operations","text":""},{"location":"xs/vectors/#41-addition","title":"4.1. Addition","text":"<p>Adding two vectors</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    vector b = xsVectorSet(4.0, 5.0, 6.0);\n    vector c = a + b;\n\n    aiEcho(\"a + b = \" + c);\n}\n</code></pre>"},{"location":"xs/vectors/#42-subtraction","title":"4.2. Subtraction","text":"<p>Subtracting two vectors</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    vector b = xsVectorSet(4.0, 5.0, 6.0);\n    vector c = a - b;\n\n    aiEcho(\"a - b = \" + c);\n}\n</code></pre>"},{"location":"xs/vectors/#43-scalar-multiplication","title":"4.3. Scalar multiplication","text":"<p>Multiplying a vector by a scalar</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    vector b = a * 2.0;\n\n    aiEcho(\"a * 2 = \" + b);\n}\n</code></pre> <p>The order matters</p> <p>Multiplying a vector by a scalar is not the same as multiplying a scalar by a vector. The order matters!</p> This will cause an error<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    vector b = 2.0 * a; // This will cause an error\n\n    aiEcho(\"2 * a = \" + b);\n}\n</code></pre>"},{"location":"xs/vectors/#44-scalar-division","title":"4.4. Scalar division","text":"<p>Dividing a vector by a scalar</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    vector b = a / 2.0;\n\n    aiEcho(\"a / 2 = \" + b);\n}\n</code></pre>"},{"location":"xs/vectors/#45-length","title":"4.5. Length","text":"<p>Getting the length of a vector</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    float length = xsVectorLength(a);\n\n    aiEcho(\"The length of a is \" + length);\n}\n</code></pre>"},{"location":"xs/vectors/#46-normalization","title":"4.6. Normalization","text":"<p>Normalizing a vector</p> Age3AI.xs<pre><code>void main(void)\n{\n    vector a = xsVectorSet(1.0, 2.0, 3.0);\n    vector b = xsVectorNormalize(a);\n\n    aiEcho(\"The normalized vector is \" + b);\n}\n</code></pre>"}]}